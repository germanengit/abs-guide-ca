# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-28 12:11\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../internal.rst:3
msgid "XXX  Chapter 15. Internal Commands and Builtins"
msgstr ""

#: ../../internal.rst:5
msgid ""
"A *builtin* is a **command** contained within the Bash tool set, literally "
"*built in* . This is either for performance reasons -- builtins execute "
"faster than external commands, which usually require *forking off* ` [1]  "
"<internal.html#FTN.AEN8607>`__ a separate process -- or because a particular"
" builtin needs direct access to the shell internals."
msgstr ""

#: ../../internal.rst:14
msgid ""
"When a command or the shell itself initiates (or *spawns* ) a new subprocess"
" to carry out a task, this is called *forking* . This new process is the "
"*child* , and the process that *forked* it off is the *parent* . While the "
"*child process* is doing its work, the *parent process* is still executing."
msgstr ""

#: ../../internal.rst:20
msgid ""
"Note that while a *parent process* gets the *process ID* of the *child "
"process* , and can thus pass arguments to it, *the reverse is not true* . "
"`This can create problems that are subtle and hard to track down. "
"<gotchas.html#PARCHILDPROBREF>`__"
msgstr ""

#: ../../internal.rst:27
msgid "Exemple 1. A script that spawns multiple instances of itself"
msgstr ""

#: ../../internal.rst:67
msgid ""
"Generally, a Bash *builtin* does not fork a subprocess when it executes "
"within a script. An external system command or filter in a script usually "
"*will* fork a subprocess."
msgstr ""

#: ../../internal.rst:144
msgid ""
"A builtin may be a synonym to a system command of the same name, but Bash "
"reimplements it internally. For example, the Bash **echo** command is not "
"the same as ``      /bin/echo     `` , although their behavior is almost "
"identical."
msgstr ""

#: ../../internal.rst:160
msgid "Keyword"
msgstr ""

#: ../../internal.rst:162
msgid ""
"A *keyword* is a *reserved* word, token or operator. Keywords have a special"
" meaning to the shell, and indeed are the building blocks of the shell's "
"syntax. As examples, *for* , *while* , *do* , and *!* are keywords. Similar "
"to a `builtin <internal.html#BUILTINREF>`__ , a keyword is hard-coded into "
"Bash, but unlike a *builtin* , a keyword is not in itself a command, but *a "
"subunit of a command construct* . ` [2] <internal.html#FTN.AEN8650>`__"
msgstr ""

#: ../../internal.rst:172
msgid "I/O"
msgstr ""

#: ../../internal.rst:175
msgid "echo"
msgstr ""

#: ../../internal.rst:177
msgid ""
"prints (to ``         stdout        `` ) an expression or variable (see "
"`Example 4-1 <varsubn.html#EX9>`__ )."
msgstr ""

#: ../../internal.rst:188
msgid ""
"An **echo** requires the ``         -e        `` option to print escaped "
"characters. See `Example 5-2 <escapingsection.html#ESCAPED>`__ ."
msgstr ""

#: ../../internal.rst:192
msgid ""
"Normally, each **echo** command prints a terminal newline, but the ``"
"         -n        `` option suppresses this."
msgstr ""

#: ../../internal.rst:197 ../../internal.rst:234 ../../internal.rst:332
#: ../../internal.rst:785 ../../internal.rst:879 ../../internal.rst:2011
#: ../../internal.rst:2143 ../../internal.rst:2191 ../../internal.rst:2458
#: ../../internal.rst:2470 ../../internal.rst:2557
msgid "Note"
msgstr ""

#: ../../internal.rst:199
msgid "An **echo** can be used to feed a sequence of commands down a pipe."
msgstr ""

#: ../../internal.rst:236
msgid ""
"An **echo** , in combination with `command substitution "
"<commandsub.html#COMMANDSUBREF>`__ can set a variable."
msgstr ""

#: ../../internal.rst:239
msgid ""
"``                         a=`echo           \"HELLO\"tr A-Z a-z`"
"                       ``"
msgstr ""

#: ../../internal.rst:241
msgid ""
"See also `Example 16-22 <textproc.html#LOWERCASE>`__ , `Example 16-3 "
"<moreadv.html#EX57>`__ , `Example 16-47 <mathc.html#MONTHLYPMT>`__ , and "
"`Example 16-48 <mathc.html#BASE>`__ ."
msgstr ""

#: ../../internal.rst:249
msgid ""
"Be aware that **echo \\`command\\`** deletes any linefeeds that the output "
"of ``                   command                 `` generates."
msgstr ""

#: ../../internal.rst:252
msgid ""
"The `$IFS <internalvariables.html#IFSREF>`__ (internal field separator) "
"variable normally contains \\\\n (linefeed) as one of its set of `whitespace"
" <special-chars.html#WHITESPACEREF>`__ characters. Bash therefore splits the"
" output of ``                   command                 `` at linefeeds into"
" arguments to **echo** . Then **echo** outputs these arguments, separated by"
" spaces."
msgstr ""

#: ../../internal.rst:276
msgid ""
"So, how can we embed a linefeed within an `echoed <internal.html#ECHOREF>`__"
" character string?"
msgstr ""

#: ../../internal.rst:334
msgid ""
"This command is a shell builtin, and not the same as ``            /bin/echo"
"           `` , although its behavior is similar."
msgstr ""

#: ../../internal.rst:366
msgid "printf"
msgstr ""

#: ../../internal.rst:368
msgid ""
"The **printf** , formatted print, command is an enhanced **echo** . It is a "
"limited variant of the *C* language ``         printf()        `` library "
"function, and its syntax is somewhat different."
msgstr ""

#: ../../internal.rst:373
msgid ""
"**printf** ``                   format-string                 `` ... ``"
"                   parameter                 `` ..."
msgstr ""

#: ../../internal.rst:376
msgid ""
"This is the Bash *builtin* version of the ``         /bin/printf        `` "
"or ``         /usr/bin/printf        `` command. See the **printf** `manpage"
" <basic.html#MANREF>`__ (of the system command) for in-depth coverage."
msgstr ""

#: ../../internal.rst:384 ../../internal.rst:1135 ../../internal.rst:1320
#: ../../internal.rst:1735 ../../internal.rst:2034
msgid "Caution"
msgstr ""

#: ../../internal.rst:386
msgid "Older versions of Bash may not support **printf** ."
msgstr ""

#: ../../internal.rst:393
msgid "Exemple 2. *printf* in action"
msgstr ""

#: ../../internal.rst:443
msgid "Formatting error messages is a useful application of **printf**"
msgstr ""

#: ../../internal.rst:466
msgid "See also `Example 36-17 <assortedtips.html#PROGRESSBAR>`__ ."
msgstr ""

#: ../../internal.rst:469
msgid "read"
msgstr ""

#: ../../internal.rst:471
msgid ""
"\"Reads\" the value of a variable from ``         stdin        `` , that is,"
" interactively fetches input from the keyboard. The ``         -a        `` "
"option lets **read** get array variables (see `Example 27-6 "
"<arrays.html#EX67>`__ )."
msgstr ""

#: ../../internal.rst:480
msgid "Exemple 3. Variable assignment, using *read*"
msgstr ""

#: ../../internal.rst:512
msgid ""
"A **read** without an associated variable assigns its input to the dedicated"
" variable `$REPLY <internalvariables.html#REPLYREF>`__ ."
msgstr ""

#: ../../internal.rst:517
msgid "Exemple 4. What happens when *read* has no variable"
msgstr ""

#: ../../internal.rst:575
msgid ""
"Normally, inputting a ``                   \\                 `` suppresses "
"a newline during input to a **read** . The ``         -r        `` option "
"causes an inputted ``                   \\                 `` to be "
"interpreted literally."
msgstr ""

#: ../../internal.rst:583
msgid "Exemple 5. Multi-line input to *read*"
msgstr ""

#: ../../internal.rst:623
msgid ""
"The **read** command has some interesting options that permit echoing a "
"prompt and even reading keystrokes without hitting **ENTER** ."
msgstr ""

#: ../../internal.rst:643
msgid ""
"The ``         -n        `` option to **read** also allows detection of the "
"**arrow keys** and certain of the other unusual keys."
msgstr ""

#: ../../internal.rst:648
msgid "Exemple 6. Detecting the arrow keys"
msgstr ""

#: ../../internal.rst:787
msgid ""
"The ``            -n           `` option to **read** will not detect the "
"**ENTER** (newline) key."
msgstr ""

#: ../../internal.rst:793
msgid ""
"The ``         -t        `` option to **read** permits timed input (see "
"`Example 9-4 <internalvariables.html#TOUT>`__ and `Example A-41 "
"<contributed-scripts.html#QKY>`__ )."
msgstr ""

#: ../../internal.rst:797
msgid ""
"The ``         -u        `` option takes the `file descriptor <io-"
"redirection.html#FDREF>`__ of the target file."
msgstr ""

#: ../../internal.rst:800
msgid ""
"The **read** command may also \"read\" its variable value from a file "
"`redirected <io-redirection.html#IOREDIRREF>`__ to ``         stdin        "
"`` . If the file contains more than one line, only the first line is "
"assigned to the variable. If **read** has more than one parameter, then each"
" of these variables gets assigned a successive `whitespace-delineated "
"<special-chars.html#WHITESPACEREF>`__ string. Caution!"
msgstr ""

#: ../../internal.rst:811
msgid ""
"Exemple 7. Using *read* with `file redirection <io-"
"redirection.html#IOREDIRREF>`__"
msgstr ""

#: ../../internal.rst:881
msgid ""
"`Piping <special-chars.html#PIPEREF>`__ output to a *read* , using `echo "
"<internal.html#ECHOREF>`__ to set variables `will fail "
"<gotchas.html#BADREAD0>`__ ."
msgstr ""

#: ../../internal.rst:885
msgid "Yet, piping the output of `cat <basic.html#CATREF>`__ *seems* to work."
msgstr ""

#: ../../internal.rst:901
msgid "Exemple 7. Problems reading from a pipe"
msgstr ""

#: ../../internal.rst:953
msgid ""
"The *gendiff* script, usually found in ``            /usr/bin           `` "
"on many Linux distros, pipes the output of `find <moreadv.html#FINDREF>`__ "
"to a *while read* construct."
msgstr ""

#: ../../internal.rst:1096 ../../internal.rst:1429 ../../internal.rst:1725
#: ../../internal.rst:2094
msgid "Tip"
msgstr ""

#: ../../internal.rst:1098
msgid ""
"It is possible to *paste* text into the input field of a *read* (but *not* "
"multiple lines!). See `Example A-38 <contributed-scripts.html#PADSW>`__ ."
msgstr ""

#: ../../internal.rst:1108
msgid "Filesystem"
msgstr ""

#: ../../internal.rst:1111
msgid "cd"
msgstr ""

#: ../../internal.rst:1113
msgid ""
"The familiar **cd** change directory command finds use in scripts where "
"execution of a command requires being in a specified directory."
msgstr ""

#: ../../internal.rst:1124
msgid ""
"[from the `previously cited <special-chars.html#COXEX>`__ example by Alan "
"Cox]"
msgstr ""

#: ../../internal.rst:1127
msgid ""
"The ``         -P        `` (physical) option to **cd** causes it to ignore "
"symbolic links."
msgstr ""

#: ../../internal.rst:1130
msgid ""
"**cd -** changes to `$OLDPWD <internalvariables.html#OLDPWD>`__ , the "
"previous working directory."
msgstr ""

#: ../../internal.rst:1137
msgid ""
"The **cd** command does not function as expected when presented with two "
"forward slashes."
msgstr ""

#: ../../internal.rst:1171
msgid "pwd"
msgstr ""

#: ../../internal.rst:1173
msgid ""
"Print Working Directory. This gives the user's (or script's) current "
"directory (see `Example 15-9 <internal.html#EX37>`__ ). The effect is "
"identical to reading the value of the builtin variable `$PWD "
"<internalvariables.html#PWDREF>`__ ."
msgstr ""

#: ../../internal.rst:1179
msgid "pushd , **popd** , **dirs**"
msgstr ""

#: ../../internal.rst:1181
msgid ""
"This command set is a mechanism for bookmarking working directories, a means"
" of moving back and forth through directories in an orderly manner. A "
"pushdown `stack <internalvariables.html#STACKDEFREF>`__ is used to keep "
"track of directory names. Options allow various manipulations of the "
"directory stack."
msgstr ""

#: ../../internal.rst:1187
msgid ""
"``                   pushd           dir-name                 `` pushes the "
"path ``                   dir-name                 `` onto the directory "
"stack (to the *top* of the stack) and simultaneously changes the current "
"working directory to ``                   dir-name                 ``"
msgstr ""

#: ../../internal.rst:1193
msgid ""
"**popd** removes (pops) the top directory path name off the directory stack "
"and simultaneously changes the current working directory to the directory "
"now at the *top* of the stack."
msgstr ""

#: ../../internal.rst:1197
msgid ""
"**dirs** lists the contents of the directory stack (compare this with the "
"`$DIRSTACK <internalvariables.html#DIRSTACKREF>`__ variable). A successful "
"**pushd** or **popd** will automatically invoke **dirs** ."
msgstr ""

#: ../../internal.rst:1202
msgid ""
"Scripts that require various changes to the current working directory "
"without hard-coding the directory name changes can make good use of these "
"commands. Note that the implicit ``         $DIRSTACK        `` array "
"variable, accessible from within a script, holds the contents of the "
"directory stack."
msgstr ""

#: ../../internal.rst:1210
msgid "Exemple 8. Changing the current working directory"
msgstr ""

#: ../../internal.rst:1248
msgid "Variables"
msgstr ""

#: ../../internal.rst:1251
msgid "let"
msgstr ""

#: ../../internal.rst:1253
msgid ""
"The **let** command carries out *arithmetic* operations on variables. ` [3]"
"  <internal.html#FTN.AEN9009>`__ In many cases, it functions as a less "
"complex version of `expr <moreadv.html#EXPRREF>`__ ."
msgstr ""

#: ../../internal.rst:1260
msgid "Exemple 9. Letting *let* do arithmetic."
msgstr ""

#: ../../internal.rst:1322
msgid ""
"The *let* command can, in certain contexts, return a surprising `exit status"
" <exit-status.html#EXITSTATUSREF>`__ ."
msgstr ""

#: ../../internal.rst:1418
msgid "eval"
msgstr ""

#: ../../internal.rst:1420
msgid "``                   eval arg1 [arg2] ... [argN]                 ``"
msgstr ""

#: ../../internal.rst:1422
msgid ""
"Combines the arguments in an expression or list of expressions and ``"
"                   evaluates                 `` them. Any variables within "
"the expression are expanded. The net result is to **convert a string into a "
"command** ."
msgstr ""

#: ../../internal.rst:1431
msgid ""
"The **eval** command can be used for code generation from the command-line "
"or within a script."
msgstr ""

#: ../../internal.rst:1449
msgid "Each invocation of *eval* forces a re- *evaluation* of its arguments."
msgstr ""

#: ../../internal.rst:1472
msgid "Exemple 10. Showing the effect of *eval*"
msgstr ""

#: ../../internal.rst:1523
msgid "Exemple 11. Using *eval* to select among variables"
msgstr ""

#: ../../internal.rst:1569
msgid "Exemple 12. *Echoing* the *command-line parameters*"
msgstr ""

#: ../../internal.rst:1619
msgid "Exemple 13. Forcing a log-off"
msgstr ""

#: ../../internal.rst:1665
msgid "Exemple 14. A version of *rot13*"
msgstr ""

#: ../../internal.rst:1696
msgid ""
"Here is another example of using *eval* to *evaluate* a complex expression, "
"this one from an earlier version of YongYe's `Tetris game script "
"<https://github.com/yongye/shell/blob/master/Tetris_Game.sh>`__ ."
msgstr ""

#: ../../internal.rst:1709
msgid ""
"`Example A-53 <contributed-scripts.html#SAMORSE>`__ uses *eval* to convert "
"`array <arrays.html#ARRAYREF>`__ elements into a command list."
msgstr ""

#: ../../internal.rst:1713
msgid ""
"The *eval* command occurs in the older version of `indirect referencing "
"<ivr.html#IVRREF>`__ ."
msgstr ""

#: ../../internal.rst:1727
msgid ""
"The *eval* command can be used to `parameterize *brace expansion* "
"<bashver3.html#BRACEEXPREF3>`__ ."
msgstr ""

#: ../../internal.rst:1737
msgid ""
"The **eval** command can be risky, and normally should be avoided when there"
" exists a reasonable alternative. An ``                         eval"
"           $COMMANDS                       `` executes the contents of ``"
"                         COMMANDS                       `` , which may "
"contain such unpleasant surprises as **rm -rf \\*** . Running an **eval** on"
" unfamiliar code written by persons unknown is living dangerously."
msgstr ""

#: ../../internal.rst:1750
msgid "set"
msgstr ""

#: ../../internal.rst:1752
msgid ""
"The **set** command changes the value of internal script variables/options. "
"One use for this is to toggle `option flags <options.html#OPTIONSREF>`__ "
"which help determine the behavior of the script. Another application for it "
"is to reset the `positional parameters "
"<internalvariables.html#POSPARAMREF>`__ that a script sees as the result of "
"a command ( ``                   set           `command`                 `` "
"). The script can then parse the `fields <special-chars.html#FIELDREF>`__ of"
" the command output."
msgstr ""

#: ../../internal.rst:1764
msgid "Exemple 15. Using *set* with positional parameters"
msgstr ""

#: ../../internal.rst:1808
msgid "More fun with positional parameters."
msgstr ""

#: ../../internal.rst:1812
msgid "Exemple 16. Reversing the positional parameters"
msgstr ""

#: ../../internal.rst:1886
msgid ""
"Invoking **set** without any options or arguments simply lists all the "
"`environmental <othertypesv.html#ENVREF>`__ and other variables that have "
"been initialized."
msgstr ""

#: ../../internal.rst:1906
msgid ""
"Using **set** with the ``         --        `` option explicitly assigns the"
" contents of a variable to the positional parameters. If no variable follows"
" the ``         --        `` it *unsets* the positional parameters."
msgstr ""

#: ../../internal.rst:1913
msgid "Exemple 17. Reassigning the positional parameters"
msgstr ""

#: ../../internal.rst:1960
msgid ""
"See also `Example 11-2 <loops1.html#EX22A>`__ and `Example 16-56 "
"<extmisc.html#EX33A>`__ ."
msgstr ""

#: ../../internal.rst:1964
msgid "unset"
msgstr ""

#: ../../internal.rst:1966
msgid ""
"The **unset** command deletes a shell variable, effectively setting it to "
"*null* . Note that this command does not affect positional parameters."
msgstr ""

#: ../../internal.rst:1983
msgid "Exemple 18. \"Unsetting\" a variable"
msgstr ""

#: ../../internal.rst:2013
msgid ""
"In most contexts, an *undeclared* variable and one that has been *unset* are"
" equivalent. However, the `${parameter:-default} <parameter-"
"substitution.html#UNDDR>`__ parameter substitution construct can distinguish"
" between the two."
msgstr ""

#: ../../internal.rst:2022
msgid "export"
msgstr ""

#: ../../internal.rst:2025
msgid ""
"The **export** ` [4]  <internal.html#FTN.AEN9199>`__ command makes available"
" variables to all child processes of the running script or shell. One "
"important use of the **export** command is in `startup files "
"<files.html#FILESREF1>`__ , to initialize and make accessible `environmental"
" variables <othertypesv.html#ENVREF>`__ to subsequent user processes."
msgstr ""

#: ../../internal.rst:2036
msgid ""
"Unfortunately, `there is no way to export variables back to the parent "
"process <gotchas.html#PARCHILDPROBREF>`__ , to the process that called or "
"invoked the script or shell."
msgstr ""

#: ../../internal.rst:2045
msgid ""
"Exemple 20. Using *export* to pass a variable to an embedded *awk* script"
msgstr ""

#: ../../internal.rst:2096
msgid ""
"It is possible to initialize and export variables in the same operation, as "
"in **export var1=xxx** ."
msgstr ""

#: ../../internal.rst:2099
msgid ""
"However, as Greg Keraunen points out, in certain situations this may have a "
"different effect than setting a variable, then exporting it."
msgstr ""

#: ../../internal.rst:2145
msgid ""
"A variable to be exported may require special treatment. See `Example M-2 "
"<sample-bashrc.html#BASHPROF>`__ ."
msgstr ""

#: ../../internal.rst:2152
msgid "declare , **typeset**"
msgstr ""

#: ../../internal.rst:2154
msgid ""
"The `declare <declareref.html>`__ and `typeset <declareref.html>`__ commands"
" specify and/or restrict properties of variables."
msgstr ""

#: ../../internal.rst:2158
msgid "readonly"
msgstr ""

#: ../../internal.rst:2160
msgid ""
"Same as `declare -r <declareref.html>`__ , sets a variable as read-only, or,"
" in effect, as a constant. Attempts to change the variable fail with an "
"error message. This is the shell analog of the *C* language **const** type "
"qualifier."
msgstr ""

#: ../../internal.rst:2166
msgid "getopts"
msgstr ""

#: ../../internal.rst:2168
msgid ""
"This powerful tool parses command-line arguments passed to the script. This "
"is the Bash analog of the `getopt <extmisc.html#GETOPTY>`__ external command"
" and the *getopt* library function familiar to *C* programmers. It permits "
"passing and concatenating multiple options ` [5]  "
"<internal.html#FTN.AEN9289>`__ and associated arguments to a script (for "
"example ``                   scriptname -abc -e           /usr/local"
"                 `` )."
msgstr ""

#: ../../internal.rst:2177
msgid ""
"The **getopts** construct uses two implicit variables. ``         $OPTIND"
"        `` is the argument pointer ( *OPTion INDex* ) and ``         $OPTARG"
"        `` ( *OPTion ARGument* ) the (optional) argument attached to an "
"option. A colon following the option name in the declaration tags that "
"option as having an associated argument."
msgstr ""

#: ../../internal.rst:2184
msgid ""
"A **getopts** construct usually comes packaged in a `while loop "
"<loops1.html#WHILELOOPREF>`__ , which processes the options and arguments "
"one at a time, then increments the implicit ``         $OPTIND        `` "
"variable to point to the next."
msgstr ""

#: ../../internal.rst:2193
msgid ""
"The arguments passed from the command-line to the script must be preceded by"
" a dash ( ``              -             `` ). It is the prefixed ``"
"              -             `` that lets **getopts** recognize command-line "
"arguments as *options* . In fact, **getopts** will not process arguments "
"without the prefixed ``              -             `` , and will terminate "
"option processing at the first argument encountered lacking them."
msgstr ""

#: ../../internal.rst:2201
msgid ""
"The **getopts** template differs slightly from the standard `while loop "
"<loops1.html#WHILELOOPREF>`__ , in that it lacks condition brackets."
msgstr ""

#: ../../internal.rst:2205
msgid ""
"The **getopts** construct is a highly functional replacement for the "
"traditional `getopt <extmisc.html#GETOPTY>`__ external command."
msgstr ""

#: ../../internal.rst:2239
msgid ""
"Exemple 21. Using *getopts* to read the options/arguments passed to a script"
msgstr ""

#: ../../internal.rst:2313
msgid "Script Behavior"
msgstr ""

#: ../../internal.rst:2318
msgid "source"
msgstr ""

#: ../../internal.rst:2320
msgid "Tamb√© anomenat comanda punt o *dot command*."
msgstr ""

#: ../../internal.rst:2322
msgid ""
"Quan invoquem aquesta comanda des de la l√≠nia de comandes, s'executa un "
"gui√≥. En canvi, dins d'un gui√≥, ``source nomfitxer`` carrega el fitxer "
"*nomfitxer* de manera que el contingut d'aquest fitxer passa a formar part "
"del gui√≥. Es diu que el gui√≥ *importa* el codi guardat a *nomfitxer*."
msgstr ""

#: ../../internal.rst:2328
msgid ""
"Aquesta importaci√≥, en angl√©s se la coneix com a *sourcing* i implica el "
"mateix resultat que la directiva ``#include`` en un programa C. √âs a dir, el"
" resultat final equival a si el contingut de *nomfitxer* hagu√©s estat escrit"
" directament en el gui√≥ que l'importa."
msgstr ""

#: ../../internal.rst:2333
msgid ""
"Un possible √∫s √©s per permetre que m√©s d'un gui√≥ comparteixi un matex fitxer"
" de dades o una mateixa biblioteca de funcions."
msgstr ""

#: ../../internal.rst:2338
msgid "Exemple 19. \"Including\" a data file"
msgstr ""

#: ../../internal.rst:2370
msgid ""
"File ``          data-file         `` for `Example 15-22 "
"<internal.html#EX38>`__ , above. Must be present in same directory."
msgstr ""

#: ../../internal.rst:2416
msgid ""
"If the *sourced* file is itself an executable script, then it will run, then"
" return control to the script that called it. A *sourced* executable script "
"may use a `return <complexfunct.html#RETURNREF>`__ for this purpose."
msgstr ""

#: ../../internal.rst:2421
msgid ""
"Arguments may be (optionally) passed to the *sourced* file as `positional "
"parameters <othertypesv.html#POSPARAMREF1>`__ ."
msgstr ""

#: ../../internal.rst:2431
msgid ""
"It is even possible for a script to *source* itself, though this does not "
"seem to have any practical applications."
msgstr ""

#: ../../internal.rst:2438
msgid "Exemple 20. Un gui√≥ (inutil) que s'autocarrega"
msgstr ""

#: ../../internal.rst:2446
msgid "exit"
msgstr ""

#: ../../internal.rst:2448
msgid ""
"Unconditionally terminates a script. ` [6] <internal.html#FTN.AEN9393>`__ "
"The **exit** command may optionally take an integer argument, which is "
"returned to the shell as the `exit status <exit-"
"status.html#EXITSTATUSREF>`__ of the script. It is good practice to end all "
"but the simplest scripts with an ``                   exit 0"
"                 `` , indicating a successful run."
msgstr ""

#: ../../internal.rst:2460
msgid ""
"If a script terminates with an **exit** lacking an argument, the exit status"
" of the script is the exit status of the last command executed in the "
"script, not counting the **exit** . This is equivalent to an **exit $?** ."
msgstr ""

#: ../../internal.rst:2472
msgid ""
"An **exit** command may also be used to terminate a `subshell "
"<subshells.html#SUBSHELLSREF>`__ ."
msgstr ""

#: ../../internal.rst:2479
msgid "exec"
msgstr ""

#: ../../internal.rst:2481
msgid ""
"This shell builtin replaces the current process with a specified command. "
"Normally, when the shell encounters a command, it `forks off "
"<internal.html#FORKREF>`__ a child process to actually execute the command. "
"Using the **exec** builtin, the shell does not fork, and the command *exec* "
"'ed replaces the shell. When used in a script, therefore, it forces an exit "
"from the script when the **exec** 'ed command terminates. ` [7] "
"<internal.html#FTN.AEN9425>`__"
msgstr ""

#: ../../internal.rst:2492
msgid "Exemple 21. Effects of *exec*"
msgstr ""

#: ../../internal.rst:2517
msgid "Exemple 22. A script that *exec's* itself"
msgstr ""

#: ../../internal.rst:2549
msgid ""
"An **exec** also serves to `reassign file descriptors "
"<x17974.html#USINGEXECREF>`__ . For example, ``                   exec"
"           <zzz-file                 `` replaces ``         stdin        `` "
"with the file ``         zzz-file        `` ."
msgstr ""

#: ../../internal.rst:2559
msgid ""
"The ``            -exec           `` option to `find "
"<moreadv.html#FINDREF>`__ is ``                         not"
"                       `` the same as the **exec** shell builtin."
msgstr ""

#: ../../internal.rst:2568
msgid "shopt"
msgstr ""

#: ../../internal.rst:2570
msgid ""
"This command permits changing *shell options* on the fly (see `Example 25-1 "
"<aliases.html#AL>`__ and `Example 25-2 <aliases.html#UNAL>`__ ). It often "
"appears in the Bash `startup files <files.html#FILESREF1>`__ , but also has "
"its uses in scripts. Needs `version 2 <bashver2.html#BASH2REF>`__ or later "
"of Bash."
msgstr ""

#: ../../internal.rst:2590
msgid "caller"
msgstr ""

#: ../../internal.rst:2592
msgid ""
"Putting a **caller** command inside a `function "
"<functions.html#FUNCTIONREF>`__ echoes to ``         stdout        `` "
"information about the *caller* of that function."
msgstr ""

#: ../../internal.rst:2619
msgid ""
"A **caller** command can also return *caller* information from a script "
"`sourced <internal.html#SOURCEREF>`__ within another script. Analogous to a "
"function, this is a \"subroutine call.\""
msgstr ""

#: ../../internal.rst:2623
msgid "You may find this command useful in debugging."
msgstr ""

#: ../../internal.rst:2628
msgid "Commands"
msgstr ""

#: ../../internal.rst:2631
msgid "true"
msgstr ""

#: ../../internal.rst:2633
msgid ""
"A command that returns a successful ( zero ) `exit status <exit-"
"status.html#EXITSTATUSREF>`__ , but does nothing else."
msgstr ""

#: ../../internal.rst:2662
msgid "false"
msgstr ""

#: ../../internal.rst:2664
msgid ""
"A command that returns an unsuccessful `exit status <exit-"
"status.html#EXITSTATUSREF>`__ , but does nothing else."
msgstr ""

#: ../../internal.rst:2704
msgid "type [cmd]"
msgstr ""

#: ../../internal.rst:2706
msgid ""
"Similar to the `which <filearchiv.html#WHICHREF>`__ external command, **type"
" cmd** identifies \"cmd.\" Unlike **which** , **type** is a Bash builtin. "
"The useful ``         -a        `` option to **type** identifies ``"
"                   keywords                 `` and ``                   "
"builtins                 `` , and also locates system commands with "
"identical names."
msgstr ""

#: ../../internal.rst:2729
msgid ""
"The **type** command can be useful for `testing whether a certain command "
"exists <special-chars.html#DEVNULLREDIRECT>`__ ."
msgstr ""

#: ../../internal.rst:2733
msgid "hash [cmds]"
msgstr ""

#: ../../internal.rst:2735
msgid ""
"Records the *path* name of specified commands -- in the shell *hash table* `"
" [8]  <internal.html#FTN.AEN9591>`__ -- so the shell or script will not need"
" to search the `$PATH <internalvariables.html#PATHREF>`__ on subsequent "
"calls to those commands. When **hash** is called with no arguments, it "
"simply lists the commands that have been hashed. The ``         -r        ``"
" option resets the hash table."
msgstr ""

#: ../../internal.rst:2744
msgid "bind"
msgstr ""

#: ../../internal.rst:2747
msgid "<internal.html#FTN.AEN9621>`__ key bindings."
msgstr ""

#: ../../internal.rst:2750
msgid "help"
msgstr ""

#: ../../internal.rst:2752
msgid ""
"Gets a short usage summary of a shell builtin. This is the counterpart to "
"`whatis <filearchiv.html#WHATISREF>`__ , but for builtins. The display of "
"*help* information got a much-needed update in the `version 4 release "
"<bashver4.html#BASH4REF>`__ of Bash."
msgstr ""

#: ../../internal.rst:2770
msgid "Anotacions"
msgstr ""

#: ../../internal.rst:2771
msgid "` [1]  <internal.html#AEN8607>`__"
msgstr ""

#: ../../internal.rst:2773
msgid ""
"As Nathan Coulter points out, \"while forking a process is a low-cost "
"operation, executing a new program in the newly-forked child process adds "
"more overhead.\""
msgstr ""

#: ../../internal.rst:2778
msgid "` [2]  <internal.html#AEN8650>`__"
msgstr ""

#: ../../internal.rst:2780
msgid ""
"An exception to this is the `time <timedate.html#TIMREF>`__ command, listed "
"in the official Bash documentation as a keyword ( \"reserved word\" )."
msgstr ""

#: ../../internal.rst:2785
msgid "` [3]  <internal.html#AEN9009>`__"
msgstr ""

#: ../../internal.rst:2787
msgid ""
"Note that *let* `cannot be used for setting *string* variables. "
"<gotchas.html#LETBAD>`__"
msgstr ""

#: ../../internal.rst:2791
msgid "` [4]  <internal.html#AEN9199>`__"
msgstr ""

#: ../../internal.rst:2793
msgid ""
"To *Export* information is to make it available in a more general context. "
"See also `scope <subshells.html#SCOPEREF>`__ ."
msgstr ""

#: ../../internal.rst:2797
msgid "` [5]  <internal.html#AEN9289>`__"
msgstr ""

#: ../../internal.rst:2799
msgid ""
"An *option* is an argument that acts as a flag, switching script behaviors "
"on or off. The argument associated with a particular option indicates the "
"behavior that the option (flag) switches on or off."
msgstr ""

#: ../../internal.rst:2804
msgid "` [6]  <internal.html#AEN9393>`__"
msgstr ""

#: ../../internal.rst:2806
msgid ""
"Technically, an **exit** only terminates the process (or shell) in which it "
"is running, *not* the *parent process* ."
msgstr ""

#: ../../internal.rst:2810
msgid "` [7]  <internal.html#AEN9425>`__"
msgstr ""

#: ../../internal.rst:2812
msgid ""
"Unless the **exec** is used to `reassign file descriptors "
"<x17974.html#USINGEXECREF>`__ ."
msgstr ""

#: ../../internal.rst:2816
msgid "` [8]  <internal.html#AEN9591>`__"
msgstr ""

#: ../../internal.rst:2818
msgid ""
"*Hashing* is a method of creating lookup keys for data stored in a table. "
"The *data items themselves* are \"scrambled\" to create keys, using one of a"
" number of simple mathematical *algorithms* (methods, or recipes)."
msgstr ""

#: ../../internal.rst:2823
msgid ""
"An advantage of *hashing* is that it is fast. A disadvantage is that "
"*collisions* -- where a single key maps to more than one data item -- are "
"possible."
msgstr ""

#: ../../internal.rst:2827
msgid ""
"For examples of hashing see `Example A-20 <contributed-"
"scripts.html#HASHLIB>`__ and `Example A-21 <contributed-"
"scripts.html#HASHEXAMPLE>`__ ."
msgstr ""

#: ../../internal.rst:2832
msgid "` [9]  <internal.html#AEN9621>`__"
msgstr ""

#: ../../internal.rst:2834
msgid ""
"The *readline* library is what Bash uses for reading input in an interactive"
" shell."
msgstr ""
