# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Moisès Gómez, Germán Alonso
# This file is distributed under the same license as the Traducció abs-guide branca git gettext-way package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Traducció abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-28 12:11\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../intandnonint.rst:4
# 10d211492e0e4b68bc8d9dd2066fcb6e
msgid "XXX  36.1. Interactive and non-interactive shells and scripts"
msgstr ""

#: ../../intandnonint.rst:6
# e41aa1ca99564daba2b684378c9e88d8
msgid "An *interactive* shell reads commands from user input on a ``      tty     `` . Among other things, such a shell reads startup files on activation, displays a prompt, and enables job control by default. The user can *interact* with the shell."
msgstr ""

#: ../../intandnonint.rst:11
# 54c47cfce7664197b4f85743df7d2559
msgid "A shell running a script is always a non-interactive shell. All the same, the script can still access its ``      tty     `` . It is even possible to emulate an interactive shell in a script."
msgstr ""

#: ../../intandnonint.rst:34
# fdd5c933e58d43628fd5e4e106dbfba8
msgid "Let us consider an *interactive* script to be one that requires input from the user, usually with `read <internal.html#READREF>`__ statements (see `Example 15-3 <internal.html#EX36>`__ ). \"Real life\" is actually a bit messier than that. For now, assume an interactive script is bound to a tty, a script that a user has invoked from the console or an *xterm* ."
msgstr ""

#: ../../intandnonint.rst:40
# ec46e6a0cf024289b46b9ad6e7f32c24
msgid "Init and startup scripts are necessarily non-interactive, since they must run without human intervention. Many administrative and system maintenance scripts are likewise non-interactive. Unvarying repetitive tasks cry out for automation by non-interactive scripts."
msgstr ""

#: ../../intandnonint.rst:45
# 83ec4a115dde41c89a606d9ca4793c36
msgid "Non-interactive scripts can run in the background, but interactive ones hang, waiting for input that never comes. Handle that difficulty by having an **expect** script or embedded `here document <here-docs.html#HEREDOCREF>`__ feed input to an interactive script running as a background job. In the simplest case, redirect a file to supply input to a **read** statement ( **read variable <file** ). These particular workarounds make possible general purpose scripts that run in either interactive or non-interactive modes."
msgstr ""

#: ../../intandnonint.rst:54
# 7044fafb96df41a8b19f60a7fd85dd88
msgid "If a script needs to test whether it is running in an interactive shell, it is simply a matter of finding whether the *prompt* variable, `$PS1 <internalvariables.html#PS1REF>`__ is set. (If the user is being prompted for input, then the script needs to display a prompt.)"
msgstr ""

#: ../../intandnonint.rst:75
# 9d39bf3492b94fed984f2b23550b8c66
msgid "the `$- <internalvariables.html#FLPREF>`__ flag."
msgstr ""

#: ../../intandnonint.rst:90
# f3d94fc763e840909f131243edcea230
msgid "*test* operator <fto.html#TERMTEST>`__ ."
msgstr ""

#: ../../intandnonint.rst:125
# 8d7e1c3e640f4202aead5e74f68d8b7f
msgid "|Note"
msgstr ""

#: ../../intandnonint.rst:127
# e624145136b941669facc91340834e5d
msgid "Scripts may be forced to run in interactive mode with the -i option or with a ``                   #!/bin/bash -i                 `` header. Be aware that this can cause erratic script behavior or show error messages even when no error is present."
msgstr ""

