# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-28 12:11\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../wrapper.rst:3
msgid "XXX. Shell Wrappers"
msgstr ""

#: ../../wrapper.rst:5
msgid ""
"A *wrapper* is a shell script that embeds a system command or utility, that "
"accepts and passes a set of parameters to that command. `[1] "
"<wrapper.html#FTN.AEN20130>`__ Wrapping a script around a complex command-"
"line simplifies invoking it. This is expecially useful with `sed "
"<sedawk.html#SEDREF>`__ and `awk <awk.html#AWKREF>`__."
msgstr ""

#: ../../wrapper.rst:11
msgid ""
"A **sed** or **awk** script would normally be invoked from the command-line "
"by a ``sed -e         'commands'`` or ``awk         'commands'``. Embedding "
"such a script in a Bash script permits calling it more simply, and makes it "
"*reusable*. This also enables combining the functionality of *sed* and "
"*awk*, for example `piping <special-chars.html#PIPEREF>`__ the output of a "
"set of *sed* commands to *awk*. As a saved executable file, you can then "
"repeatedly invoke it in its original form or modified, without the "
"inconvenience of retyping it on the command-line."
msgstr ""

#: ../../wrapper.rst:22
msgid "Exemple 1. *shell wrapper*"
msgstr ""

#: ../../wrapper.rst:64
msgid "Exemple 2. A slightly more complex *shell wrapper*"
msgstr ""

#: ../../wrapper.rst:111
msgid "Exemple 3. A generic *shell wrapper* that writes to a logfile"
msgstr ""

#: ../../wrapper.rst:147
msgid "Exemple 4. A *shell wrapper* around an awk script"
msgstr ""

#: ../../wrapper.rst:164
msgid ""
"# The Bash printf builtin will not work in this context: #     printf \"%c\""
" \"$i\" done"
msgstr ""

#: ../../wrapper.rst:168 ../../wrapper.rst:259 ../../wrapper.rst:292
#: ../../wrapper.rst:363
msgid "exit 0"
msgstr ""

#: ../../wrapper.rst:171
msgid ""
"#  Decimal   Hex     Character #  -------   ---     --------- #    33       "
"21         ! #    34       22         \" #    35       23         # #    36"
"       24         $ # #    . . . # #   122       7a         z #   123       "
"7b         { #   124       7c #   125       7d         }"
msgstr ""

#: ../../wrapper.rst:186
msgid ""
"#  Redirect the output of this script to a file #+ or pipe it to \"more\":  "
"sh pr-asc.shmore"
msgstr ""

#: ../../wrapper.rst:191
msgid "Exemple 5. A *shell wrapper* around another awk script"
msgstr ""

#: ../../wrapper.rst:199
msgid "."
msgstr ""

#: ../../wrapper.rst:201
msgid "ARGS=2 E_WRONGARGS=85"
msgstr ""

#: ../../wrapper.rst:204
msgid "if [ $# -ne \"$ARGS\" ] # Check for proper number of command-line args"
msgstr ""

#: ../../wrapper.rst:207
msgid "echo \"Usage: `basename $0` filename column-number\" exit $E_WRONGARGS"
msgstr ""

#: ../../wrapper.rst:209
msgid "fi"
msgstr ""

#: ../../wrapper.rst:211
msgid "filename=$1 column_number=$2"
msgstr ""

#: ../../wrapper.rst:214
msgid "#  Passing shell variables to the awk part of the script is a bit tr"
msgstr ""

#: ../../wrapper.rst:216
msgid ""
"#  One method is to strong-quote the Bash-script variable #+ within the awk "
"script. #     $'$BASH_SCRIPT_VAR' #      ^                ^ #  This is done "
"in the embedded awk script below. #  See the awk documentation for more "
"details."
msgstr ""

#: ../../wrapper.rst:223
msgid ""
"# A multi-line awk script is here invoked by #   awk ' #   ... #   ... #   "
"... #   '"
msgstr ""

#: ../../wrapper.rst:231
msgid "# Begin awk script. # ----------------------------- awk '"
msgstr ""

#: ../../wrapper.rst:235
msgid "{ total += $'\"${column_number}\"' } END {"
msgstr ""

#: ../../wrapper.rst:238
msgid "print total"
msgstr ""

#: ../../wrapper.rst:239
msgid "}"
msgstr ""

#: ../../wrapper.rst:241
msgid "' \"$filename\" # ----------------------------- # End awk script."
msgstr ""

#: ../../wrapper.rst:246
msgid "#   It may not be safe to pass shell variables to an embedded awk sc"
msgstr ""

#: ../../wrapper.rst:248
msgid ""
"#+  so Stephane Chazelas proposes the following alternative: #   "
"--------------------------------------- #   awk -v "
"column_number=\"$column_number\" ' #   { total += $column_number #   } #   "
"END { #       print total #   }' \"$filename\" #   "
"---------------------------------------"
msgstr ""

#: ../../wrapper.rst:262
msgid ""
"For those scripts needing a single do-it-all tool, a Swiss army knife, there"
" is *Perl*. Perl combines the capabilities of `sed <sedawk.html#SEDREF>`__ "
"and `awk <awk.html#AWKREF>`__, and throws in a large subset of **C**, to "
"boot. It is modular and contains support for everything ranging from object-"
"oriented programming up to and including the kitchen sink. Short Perl "
"scripts lend themselves to embedding within shell scripts, and there may be "
"some substance to the claim that Perl can totally replace shell scripting "
"(though the author of the *ABS Guide* remains skeptical)."
msgstr ""

#: ../../wrapper.rst:273
msgid "Exemple 6. Perl embedded in a *Bash* script"
msgstr ""

#: ../../wrapper.rst:282 ../../wrapper.rst:351
msgid "=\""
msgstr ""

#: ../../wrapper.rst:284
msgid ""
"perl -e 'print \"This line prints from an embedded Perl script.\\n\";' # "
"Like sed, Perl also uses the \"-e\" option."
msgstr ""

#: ../../wrapper.rst:287 ../../wrapper.rst:358
msgid "echo \"=============================================================="
msgstr ""

#: ../../wrapper.rst:289 ../../wrapper.rst:360
msgid "echo \"However, the script may also contain shell and system commands"
msgstr ""

#: ../../wrapper.rst:290 ../../wrapper.rst:361
msgid ".\""
msgstr ""

#: ../../wrapper.rst:295
msgid ""
"It is even possible to combine a Bash script and Perl script within the same"
" file. Depending on how the script is invoked, either the Bash part or the "
"Perl part will execute."
msgstr ""

#: ../../wrapper.rst:300
msgid "Exemple 7. Bash and Perl scripts combined"
msgstr ""

#: ../../wrapper.rst:337
msgid ""
"It is, of course, possible to embed even more exotic scripting languages "
"within shell wrappers. *Python*, for example ..."
msgstr ""

#: ../../wrapper.rst:341
msgid "Exemple 8. Python embedded in a *Bash* script"
msgstr ""

#: ../../wrapper.rst:353
msgid "python -c 'print \"This line prints from an embedded Python script.\\n"
msgstr ""

#: ../../wrapper.rst:355
msgid ""
"# Unlike sed and perl, Python uses the \"-c\" option. python -c 'k = "
"raw_input( \"Hit a key to exit to outer script. \" )'"
msgstr ""

#: ../../wrapper.rst:366
msgid ""
"Wrapping a script around *mplayer* and the Google's translation server, you "
"can create something that talks back to you."
msgstr ""

#: ../../wrapper.rst:370
msgid "Exemple 9. A script that speaks"
msgstr ""

#: ../../wrapper.rst:399
msgid ""
"One interesting example of a complex shell wrapper is Martin Matusiak's "
"`*undvd* script <http://sourceforge.net/projects/undvd/>`__, which provides "
"an easy-to-use command-line interface to the complex `mencoder "
"<http://www.mplayerhq.hu/DOCS/HTML/en/mencoder.html>`__ utility. Another "
"example is Itzchak Rehberg's `Ext3Undel "
"<http://projects.izzysoft.de/trac/ext3undel>`__, a set of scripts to recover"
" deleted file on an *ext3* filesystem."
msgstr ""

#: ../../wrapper.rst:408
msgid "Notes"
msgstr ""

#: ../../wrapper.rst:410
msgid ""
"`[1] <wrapper.html#AEN20130>`__ Quite a number of Linux utilities are, in "
"fact, shell wrappers. Some examples are ``/usr/bin/pdf2ps``, "
"``/usr/bin/batch``, and ``/usr/bin/xmkmf``."
msgstr ""
