# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-27 20:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ivr.rst:3
msgid "XXX  Chapter 28. Indirect References"
msgstr ""

#: ../../ivr.rst:5
msgid ""
"We have seen that `referencing a variable <varsubn.html>`__ , ``      $var"
"     `` , fetches its *value* . But, what about the *value of a value* ? "
"What about ``      $$var     `` ?"
msgstr ""

#: ../../ivr.rst:9
msgid ""
"The actual notation is ``             \\$$var           `` , usually "
"preceded by an `eval <internal.html#EVALREF>`__ (and sometimes an `echo "
"<internal.html#ECHOREF>`__ ). This is called an *indirect reference* ."
msgstr ""

#: ../../ivr.rst:16
msgid "Exemple 1. Indirect Variable References"
msgstr ""

#: ../../ivr.rst:106
msgid ""
"Indirect referencing in Bash is a multi-step process. First, take the name "
"of a variable: ``         varname        `` . Then, reference it: ``"
"         $varname        `` . Then, reference the reference: ``         "
"$$varname        `` . Then, *escape* the first $ : ``         \\$$varname"
"        `` . Finally, force a reevaluation of the expression and assign it: "
"**eval newvar=\\\\$$varname** ."
msgstr ""

#: ../../ivr.rst:116
msgid ""
"Of what practical use is indirect referencing of variables? It gives Bash a "
"little of the functionality of `pointers <varsubn.html#POINTERREF>`__ in *C*"
" , for instance, in `table lookup <bashver2.html#RESISTOR>`__ . And, it also"
" has some other very interesting applications. . . ."
msgstr ""

#: ../../ivr.rst:122
msgid ""
"Nils Radtke shows how to build \"dynamic\" variable names and evaluate their"
" contents. This can be useful when `sourcing <internal.html#SOURCEREF>`__ "
"configuration files."
msgstr ""

#: ../../ivr.rst:186
msgid "Exemple 2. Passing an indirect reference to *awk*"
msgstr ""

#: ../../ivr.rst:247
msgid "|Caution"
msgstr ""

#: ../../ivr.rst:249
msgid ""
"This method of indirect referencing is a bit tricky. If the second order "
"variable changes its value, then the first order variable must be properly "
"dereferenced (as in the above example). Fortunately, the ``"
"                   ${!variable}                 `` notation introduced with "
"`version 2 <bashver2.html#BASH2REF>`__ of Bash (see `Example 37-2 "
"<bashver2.html#EX78>`__ and `Example A-22 <contributed-"
"scripts.html#HASHEX2>`__ ) makes indirect referencing more intuitive."
msgstr ""

#: ../../ivr.rst:263
msgid ""
"Bash does not support pointer arithmetic, and this severely limits the "
"usefulness of indirect referencing. In fact, indirect referencing in a "
"scripting language is, at best, something of an afterthought."
msgstr ""
