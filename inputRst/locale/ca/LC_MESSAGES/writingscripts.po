# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-27 20:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../writingscripts.rst:4
msgid "XXX  O.2. Writing Scripts"
msgstr ""

#: ../../writingscripts.rst:6
msgid "Write a script to carry out each of the following tasks."
msgstr ""

#: ../../writingscripts.rst:9
msgid "** EASY**"
msgstr ""

#: ../../writingscripts.rst:12
msgid ""
"Write a script that backs itself up, that is, copies itself to a file named "
"``         backup.sh        `` ."
msgstr ""

#: ../../writingscripts.rst:15
msgid ""
"Hint: Use the `cat <basic.html#CATREF>`__ command and the appropriate "
"`positional parameter <othertypesv.html#SCRNAMEPARAM>`__ ."
msgstr ""

#: ../../writingscripts.rst:20
msgid ""
"Perform a recursive directory listing on the user's home directory and save "
"the information to a file. Compress the file, have the script prompt the "
"user to insert a USB flash drive, then press **ENTER** . Finally, save the "
"file to the flash drive after making certain the flash drive has properly "
"mounted by parsing the output of `df <system.html#DFREF>`__ . Note that the "
"flash drive must be *unmounted* before it is removed."
msgstr ""

#: ../../writingscripts.rst:28
msgid "**Converting `for <loops1.html#FORLOOPREF1>`__ loops to"
msgstr ""

#: ../../writingscripts.rst:29
msgid ""
"`while <loops1.html#WHILELOOPREF>`__ and `until "
"<loops1.html#UNTILLOOPREF>`__ loops**"
msgstr ""

#: ../../writingscripts.rst:31
msgid ""
"Convert the *for loops* in `Example 11-1 <loops1.html#EX22>`__ to *while "
"loops* . Hint: store the data in an `array <arrays.html#ARRAYREF>`__ and "
"step through the array elements."
msgstr ""

#: ../../writingscripts.rst:36
msgid ""
"Having already done the \"heavy lifting,\" now convert the loops in the "
"example to *until loops* ."
msgstr ""

#: ../../writingscripts.rst:40
msgid ""
"Write a script that reads each line of a target file, then writes the line "
"back to ``         stdout        `` , but with an extra blank line "
"following. This has the effect of *double-spacing* the file."
msgstr ""

#: ../../writingscripts.rst:45
msgid ""
"Include all necessary code to check whether the script gets the necessary "
"command-line argument (a filename), and whether the specified file exists."
msgstr ""

#: ../../writingscripts.rst:49
msgid ""
"When the script runs correctly, modify it to *triple-space* the target file."
msgstr ""

#: ../../writingscripts.rst:52
msgid ""
"Finally, write a script to remove all blank lines from the target file, "
"*single-spacing* it."
msgstr ""

#: ../../writingscripts.rst:56
msgid ""
"Write a script that echoes itself to ``         stdout        `` , but "
"*backwards* ."
msgstr ""

#: ../../writingscripts.rst:60
msgid ""
"Given a list of filenames as input, this script queries each target file "
"(parsing the output of the `file <filearchiv.html#FILEREF>`__ command) for "
"the type of compression used on it. Then the script automatically invokes "
"the appropriate decompression command ( **gunzip** , **bunzip2** , **unzip**"
" , **uncompress** , or whatever). If a target file is not compressed, the "
"script emits a warning message, but takes no other action on that particular"
" file."
msgstr ""

#: ../../writingscripts.rst:69
msgid ""
"Generate a \"unique\" 6-digit hexadecimal identifier for your computer. Do "
"*not* use the flawed `hostid <system.html#HOSTIDREF>`__ command. Hint: "
"**`md5sum <filearchiv.html#MD5SUMREF>`__ ``           /etc/passwd          "
"`` <files.html#DATAFILESREF1>`__** , then select the first 6 digits of "
"output."
msgstr ""

#: ../../writingscripts.rst:76
msgid ""
"Archive as a \"tarball\" ( ``         *.tar.gz        `` file) all the files"
" in your home directory tree ( ``         /home/your-name        `` ) that "
"have been modified in the last 24 hours. Hint: use `find "
"<moreadv.html#FINDREF>`__ ."
msgstr ""

#: ../../writingscripts.rst:81
msgid "Optional: you may use this as the basis of a *backup* script."
msgstr ""

#: ../../writingscripts.rst:84
msgid ""
"Given a `process ID <special-chars.html#PROCESSIDREF>`__ ( *PID* ) as an "
"argument, this script will check, at user-specified intervals, whether the "
"given process is still running. You may use the `ps <system.html#PPSSREF>`__"
" and `sleep <timedate.html#SLEEPREF>`__ commands."
msgstr ""

#: ../../writingscripts.rst:91
msgid ""
"Print (to ``         stdout        `` ) all prime numbers between 60000 and "
"63000. The output should be nicely formatted in columns (hint: use `printf "
"<internal.html#PRINTFREF>`__ )."
msgstr ""

#: ../../writingscripts.rst:96
msgid ""
"One type of lottery involves picking five different numbers, in the range of"
" 1 - 50. Write a script that generates five pseudorandom numbers in this "
"range, *with no duplicates* . The script will give the option of echoing the"
" numbers to ``         stdout        `` or saving them to a file, along with"
" the date and time the particular number set was generated. (If your script "
"consistently generates *winning* lottery numbers, then you can retire on the"
" proceeds and leave shell scripting to those of us who have to work for a "
"living.)"
msgstr ""

#: ../../writingscripts.rst:107
msgid "** INTERMEDIATE**"
msgstr ""

#: ../../writingscripts.rst:110
msgid ""
"Write a script `function <functions.html#FUNCTIONREF>`__ that determines if "
"an argument passed to it is an integer or a string. The function will return"
" TRUE (0) if passed an integer, and FALSE (1) if passed a string."
msgstr ""

#: ../../writingscripts.rst:115
msgid ""
"Hint: What does the following expression return when ``         $1        ``"
" is *not* an integer?"
msgstr ""

#: ../../writingscripts.rst:118
msgid "``         expr $1 + 0        ``"
msgstr ""

#: ../../writingscripts.rst:121
msgid ""
"The *atoi* function in **C** converts a string character to an integer. "
"Write a shell script function that performs the same operation. Likewise, "
"write a shell script function that does the inverse, mirroring the **C** "
"*itoa* function which converts an integer into an ASCII character."
msgstr ""

#: ../../writingscripts.rst:128
msgid ""
"List, one at a time, all files larger than 100K in the ``         "
"/home/username        `` directory tree. Give the user the option to delete "
"or compress the file, then proceed to show the next one. Write to a logfile "
"the names of all deleted files and the deletion times."
msgstr ""

#: ../../writingscripts.rst:135
msgid ""
"Simulate the functionality of the deprecated `banner "
"<extmisc.html#BANNERREF>`__ command in a script."
msgstr ""

#: ../../writingscripts.rst:139
msgid ""
"Inactive accounts on a network server waste disk space and may become a "
"security risk. Write an administrative script (to be invoked by *root* or "
"the `cron daemon <system.html#CRONREF>`__ ) that checks for and deletes user"
" accounts that have not been accessed within the last 90 days."
msgstr ""

#: ../../writingscripts.rst:146
msgid ""
"Write a script for a multi-user system that checks users' disk usage. If a "
"user surpasses a preset limit (500 MB, for example) in her ``         "
"/home/username        `` directory, then the script automatically sends her "
"a \"pigout\" warning e-mail."
msgstr ""

#: ../../writingscripts.rst:151
msgid ""
"The script will use the `du <system.html#DUREF>`__ and `mail "
"<communications.html#COMMMAIL1>`__ commands. As an option, it will allow "
"setting and enforcing quotas using the `quota <system.html#QUOTAREF>`__ and "
"`setquota <system.html#SETQUOTAREF>`__ commands."
msgstr ""

#: ../../writingscripts.rst:158
msgid ""
"For all logged in users, show their real names and the time and date of "
"their last login."
msgstr ""

#: ../../writingscripts.rst:161
msgid ""
"Hint: use `who <system.html#WHOREF>`__ , `lastlog "
"<system.html#LASTLOGREF>`__ , and parse ``          /etc/passwd         `` "
"<files.html#DATAFILESREF1>`__ ."
msgstr ""

#: ../../writingscripts.rst:166
msgid ""
"Implement, as a script, a \"safe\" delete command, ``         sdel.sh"
"        `` . Filenames passed as command-line arguments to this script are "
"not deleted, but instead `gzipped <filearchiv.html#GZIPREF>`__ if not "
"already compressed (use `file <filearchiv.html#FILEREF>`__ to check), then "
"moved to a ``         ~/TRASH        `` directory. Upon invocation, the "
"script checks the ``         ~/TRASH        `` directory for files older "
"than 48 hours and `permanently deletes <basic.html#RMREF>`__ them. (An "
"better alternative might be to have a second script handle this, "
"periodically invoked by the `cron daemon <system.html#CRONREF>`__ .)"
msgstr ""

#: ../../writingscripts.rst:177
msgid ""
"*Extra credit:* Write the script so it can handle files and directories "
"`recursively <basic.html#RMRECURS>`__ . This would give it the capability of"
" \"safely deleting\" entire directory structures."
msgstr ""

#: ../../writingscripts.rst:182
msgid ""
"What is the most efficient way to make change for $1.68, using only coins in"
" common circulations (up to 25c)? It's 6 quarters, 1 dime, a nickel, and "
"three cents."
msgstr ""

#: ../../writingscripts.rst:186
msgid ""
"Given any arbitrary command-line input in dollars and cents ($\\*.??), "
"calculate the change, using the minimum number of coins. If your home "
"country is not the United States, you may use your local currency units "
"instead. The script will need to parse the command-line input, then change "
"it to multiples of the smallest monetary unit (cents or whatever). Hint: "
"look at `Example 24-8 <complexfunct.html#EX61>`__ ."
msgstr ""

#: ../../writingscripts.rst:195
msgid ""
"Solve a *quadratic* equation of the form ``                   Ax^2 + Bx + C "
"= 0                 `` . Have a script take as arguments the coefficients, "
"``                   A                 `` , ``                   B"
"                 `` , and ``                   C                 `` , and "
"return the solutions to five decimal places."
msgstr ""

#: ../../writingscripts.rst:203
msgid ""
"Hint: pipe the coefficients to `bc <mathc.html#BCREF>`__ , using the well-"
"known formula, ``                   x = ( -B +/- sqrt( B^2 - 4AC ) ) / 2A"
"                 `` ."
msgstr ""

#: ../../writingscripts.rst:209
msgid ""
"Using the `bc <mathc.html#BCREF>`__ and `printf <internal.html#PRINTFREF>`__"
" commands, print out a nicely-formatted table of eight-place natural "
"logarithms in the interval between 0.00 and 100.00, in steps of .01."
msgstr ""

#: ../../writingscripts.rst:214
msgid ""
"Hint: *bc* requires the ``         -l        `` option to load the math "
"library."
msgstr ""

#: ../../writingscripts.rst:218
msgid ""
"Using `Example T-1 <asciitable.html#ASCIISH>`__ as a template, write a "
"script that prints to a file a complete `Unicode "
"<bashver4.html#UNICODEREF>`__ table."
msgstr ""

#: ../../writingscripts.rst:222
msgid ""
"Hint: Use the ``         -e        `` option to `echo "
"<internal.html#ECHOREF>`__ : **echo -e '\\\\uXXXX'** , where ``"
"                   XXXX                 `` is the Unicode numerical "
"character designation. This requires `version 4.2 <bashver4.html#BASH42>`__ "
"or later of Bash."
msgstr ""

#: ../../writingscripts.rst:229
msgid ""
"Find the sum of all five-digit numbers (in the range 10000 - 99999) "
"containing *exactly two* out of the following set of digits: { 4, 5, 6 }. "
"These may repeat within the same number, and if so, they count once for each"
" occurrence."
msgstr ""

#: ../../writingscripts.rst:234
msgid "Some examples of *matching numbers* are 42057, 74638, and 89515."
msgstr ""

#: ../../writingscripts.rst:237
msgid ""
"A *lucky number* is one whose individual digits add up to 7, in successive "
"additions. For example, 62431 is a *lucky number* (6 + 2 + 4 + 3 + 1 = 16, 1"
" + 6 = 7). Find all the *lucky numbers* between 1000 and 10000."
msgstr ""

#: ../../writingscripts.rst:243
msgid ""
"Borrowing the ASCII graphics from `Example A-40 <contributed-"
"scripts.html#PETALS>`__ , write a script that plays the well-known gambling "
"game of *craps* . The script will accept bets from one or more players, roll"
" the dice, and keep track of wins and losses, as well as of each player's "
"bankroll."
msgstr ""

#: ../../writingscripts.rst:250
msgid ""
"Write a script that plays the child's game of *tic-tac-toe* against a human "
"player. The script will let the human choose whether to take the first move."
" The script will follow an optimal strategy, and therefore never lose. To "
"simplify matters, you may use ASCII graphics:"
msgstr ""

#: ../../writingscripts.rst:260
msgid "x o"
msgstr ""

#: ../../writingscripts.rst:263
msgid "Your move, human (row, column)?"
msgstr ""

#: ../../writingscripts.rst:268
msgid ""
"Alphabetize (in ASCII order) an arbitrary string read from the command-line."
msgstr ""

#: ../../writingscripts.rst:272
msgid ""
"Parse ``          /etc/passwd         `` <files.html#DATAFILESREF1>`__ , and"
" output its contents in nice, easy-to-read tabular form."
msgstr ""

#: ../../writingscripts.rst:277
msgid ""
"Parse ``         /var/log/messages        `` to produce a nicely formatted "
"file of user logins and login times. The script may need to run as *root* . "
"(Hint: Search for the string \"LOGIN.\" )"
msgstr ""

#: ../../writingscripts.rst:282
msgid ""
"Certain database and spreadsheet packages use save-files with the fields "
"separated by commas, commonly referred to as *comma-separated values* or "
"CSVs. Other applications often need to parse these files."
msgstr ""

#: ../../writingscripts.rst:286
msgid ""
"Given a data file with comma-separated `fields <special-"
"chars.html#FIELDREF>`__ , of the form:"
msgstr ""

#: ../../writingscripts.rst:298
msgid ""
"Reformat the data and print it out to ``        stdout       `` in labeled, "
"evenly-spaced columns."
msgstr ""

#: ../../writingscripts.rst:302
msgid ""
"Given ASCII text input either from ``         stdin        `` or a file, "
"adjust the word spacing to right-justify each line to a user-specified line-"
"width, then send the output to ``         stdout        `` ."
msgstr ""

#: ../../writingscripts.rst:308
msgid ""
"Using the `mail <communications.html#COMMMAIL1>`__ command, write a script "
"that manages a simple mailing list. The script automatically e-mails the "
"monthly company newsletter, read from a specified text file, and sends it to"
" all the addresses on the mailing list, which the script reads from another "
"specified file."
msgstr ""

#: ../../writingscripts.rst:315
msgid ""
"Generate pseudorandom 8-character passwords, using characters in the ranges "
"[0-9], [A-Z], [a-z]. Each password must contain at least two digits."
msgstr ""

#: ../../writingscripts.rst:320
msgid ""
"You suspect that one particular user on the network has been abusing her "
"privileges and possibly attempting to hack the system. Write a script to "
"automatically monitor and log her activities when she's signed on. The log "
"file will save entries for the previous week, and delete those entries more "
"than seven days old."
msgstr ""

#: ../../writingscripts.rst:326
msgid ""
"You may use `last <system.html#LASTREF>`__ , `lastlog "
"<system.html#LASTLOGREF>`__ , and `lastcomm <system.html#LASTCOMMREF>`__ to "
"aid your surveillance of the suspected fiend."
msgstr ""

#: ../../writingscripts.rst:332
msgid ""
"Using `lynx <communications.html#LYNXREF>`__ with the ``         -traversal"
"        `` option, write a script that checks a Web site for broken links."
msgstr ""

#: ../../writingscripts.rst:338
msgid "** DIFFICULT**"
msgstr ""

#: ../../writingscripts.rst:341
msgid ""
"Write a script to check and validate passwords. The object is to flag "
"\"weak\" or easily guessed password candidates."
msgstr ""

#: ../../writingscripts.rst:344
msgid ""
"A trial password will be input to the script as a command-line parameter. To"
" be considered acceptable, a password must meet the following minimum "
"qualifications:"
msgstr ""

#: ../../writingscripts.rst:348
msgid "Minimum length of 8 characters"
msgstr ""

#: ../../writingscripts.rst:350
msgid "Must contain at least one numeric character"
msgstr ""

#: ../../writingscripts.rst:352
msgid ""
"Must contain at least one of the following non-alphabetic characters: @ , # "
", $ , % , & , \\* , + , - , ="
msgstr ""

#: ../../writingscripts.rst:355
msgid "Optional:"
msgstr ""

#: ../../writingscripts.rst:357
msgid ""
"Do a dictionary check on every sequence of at least four consecutive "
"alphabetic characters in the password under test. This will eliminate "
"passwords containing embedded \"words\" found in a standard dictionary."
msgstr ""

#: ../../writingscripts.rst:362
msgid ""
"Enable the script to check all the passwords on your system. These do not "
"reside in ``            /etc/passwd           `` "
"<files.html#DATAFILESREF1>`__ ."
msgstr ""

#: ../../writingscripts.rst:367
msgid ""
"This exercise tests mastery of `Regular Expressions "
"<regexp.html#REGEXREF>`__ ."
msgstr ""

#: ../../writingscripts.rst:371
msgid ""
"Write a script that generates a *cross-reference* ( *concordance* ) on a "
"target file. The output will be a listing of all word occurrences in the "
"target file, along with the line numbers in which each word occurs. "
"Traditionally, *linked list* constructs would be used in such applications. "
"Therefore, you should investigate `arrays <arrays.html#ARRAYREF>`__ in the "
"course of this exercise. `Example 16-12 <textproc.html#WF>`__ is probably "
"*not* a good place to start."
msgstr ""

#: ../../writingscripts.rst:381
msgid ""
"Write a script to calculate square roots of numbers using *Newton's Method* "
"."
msgstr ""

#: ../../writingscripts.rst:384
msgid ""
"The algorithm for this, expressed as a snippet of Bash `pseudo-code "
"<assortedtips.html#PSEUDOCODEREF>`__ is:"
msgstr ""

#: ../../writingscripts.rst:439
msgid ""
"It's a simple enough recipe, and *seems* at first glance easy enough to "
"convert into a working Bash script. The problem, though, is that Bash has "
"`no native support for floating point numbers <ops.html#NOFLOATINGPOINT>`__ "
". So, the script writer needs to use `bc <mathc.html#BCREF>`__ or possibly "
"`awk <awk.html#AWKREF>`__ to convert the numbers and do the calculations. It"
" could get rather messy . . ."
msgstr ""

#: ../../writingscripts.rst:448
msgid ""
"Log all accesses to the files in ``         /etc        `` during the course"
" of a single day. This information should include the filename, user name, "
"and access time. If any alterations to the files take place, that will be "
"flagged. Write this data as tabular (tab-separated) formatted records in a "
"logfile."
msgstr ""

#: ../../writingscripts.rst:455
msgid ""
"Write a script to continually monitor all running processes and to keep "
"track of how many child processes each parent spawns. If a process spawns "
"more than five children, then the script sends an e-mail to the system "
"administrator (or *root* ) with all relevant information, including the "
"time, PID of the parent, PIDs of the children, etc. The script appends a "
"report to a log file every ten minutes."
msgstr ""

#: ../../writingscripts.rst:464
msgid ""
"Strip all comments from a shell script whose name is specified on the "
"command-line. Note that the initial `#! line <sha-bang.html#SHABANGREF>`__ "
"must not be stripped out."
msgstr ""

#: ../../writingscripts.rst:469
msgid ""
"Strip all the HTML tags from a specified HTML file, then reformat it into "
"lines between 60 and 75 characters in length. Reset paragraph and block "
"spacing, as appropriate, and convert HTML tables to their approximate text "
"equivalent."
msgstr ""

#: ../../writingscripts.rst:475
msgid "Convert an XML file to both HTML and text format."
msgstr ""

#: ../../writingscripts.rst:477
msgid "Optional: A script that converts Docbook/SGML to XML."
msgstr ""

#: ../../writingscripts.rst:480
msgid ""
"Write a script that analyzes a spam e-mail by doing DNS lookups on the IP "
"addresses in the headers to identify the relay hosts as well as the "
"originating ISP. The script will forward the unaltered spam message to the "
"responsible ISPs. Of course, it will be necessary to filter out *your own "
"ISP's IP address* , so you don't end up complaining about yourself."
msgstr ""

#: ../../writingscripts.rst:487
msgid ""
"As necessary, use the appropriate `network analysis commands "
"<communications.html#COMMUNINFO1>`__ ."
msgstr ""

#: ../../writingscripts.rst:490
msgid ""
"For some ideas, see `Example 16-41 <communications.html#ISSPAMMER>`__ and "
"`Example A-28 <contributed-scripts.html#ISSPAMMER2>`__ ."
msgstr ""

#: ../../writingscripts.rst:494
msgid ""
"Optional: Write a script that searches through a list of e-mail messages and"
" deletes the spam according to specified filters."
msgstr ""

#: ../../writingscripts.rst:498
msgid ""
"Write a script that automates the process of creating `man pages "
"<basic.html#MANREF>`__ ."
msgstr ""

#: ../../writingscripts.rst:501
msgid ""
"Given a text file which contains information to be formatted into a *man "
"page* , the script will read the file, then invoke the appropriate `groff "
"<textproc.html#GROFFREF>`__ commands to output the corresponding *man page* "
"to ``         stdout        `` . The text file contains blocks of "
"information under the standard *man page* headings, i.e., NAME, SYNOPSIS, "
"DESCRIPTION, etc."
msgstr ""

#: ../../writingscripts.rst:508
msgid ""
"`Example A-39 <contributed-scripts.html#MANED>`__ is an instructive first "
"step."
msgstr ""

#: ../../writingscripts.rst:512
msgid ""
"Do a hex(adecimal) dump on a binary file specified as an argument to the "
"script. The output should be in neat tabular `fields <special-"
"chars.html#FIELDREF>`__ , with the first field showing the address, each of "
"the next 8 fields a 4-byte hex number, and the final field the ASCII "
"equivalent of the previous 8 fields."
msgstr ""

#: ../../writingscripts.rst:518
msgid ""
"The obvious followup to this is to extend the hex dump script into a "
"disassembler. Using a lookup table, or some other clever gimmick, convert "
"the hex values into 80x86 op codes."
msgstr ""

#: ../../writingscripts.rst:523
msgid ""
"Using `Example 27-15 <arrays.html#STACKEX>`__ as an inspiration, write a "
"script that emulates a 64-bit shift register as an `array "
"<arrays.html#ARRAYREF>`__ . Implement functions to *load* the register, "
"*shift left* , *shift right* , and *rotate* it. Finally, write a function "
"that interprets the register contents as eight 8-bit ASCII characters."
msgstr ""

#: ../../writingscripts.rst:532
msgid "<writingscripts.html#FTN.AEN25254>`__ by"
msgstr ""

#: ../../writingscripts.rst:533
msgid ""
"`recursively <localvar.html#RECURSIONREF0>`__ expanding the *minors* . Use a"
" 4 x 4 determinant as a test case."
msgstr ""

#: ../../writingscripts.rst:537
msgid ""
"Write a \"word-find\" puzzle generator, a script that hides 10 input words "
"in a 10 x 10 array of random letters. The words may be hidden across, down, "
"or diagonally."
msgstr ""

#: ../../writingscripts.rst:541
msgid ""
"Optional: Write a script that *solves* word-find puzzles. To keep this from "
"becoming too difficult, the solution script will find only horizontal and "
"vertical words. (Hint: Treat each row and column as a string, and search for"
" substrings.)"
msgstr ""

#: ../../writingscripts.rst:547
msgid ""
"Anagram 4-letter input. For example, the anagrams of *word* are: *do or rod "
"row word* . You may use ``         /usr/share/dict/linux.words        `` as "
"the reference list."
msgstr ""

#: ../../writingscripts.rst:553
msgid ""
"A \"word ladder\" is a sequence of words, with each successive word in the "
"sequence differing from the previous one by a single letter."
msgstr ""

#: ../../writingscripts.rst:556
msgid "For example, to \"ladder\" from *mark* to *vase* :"
msgstr ""

#: ../../writingscripts.rst:566
msgid ""
"Write a script that solves word ladder puzzles. Given a starting and an "
"ending word, the script will list all intermediate steps in the \"ladder.\" "
"Note that *all* words in the sequence must be legitimate dictionary words."
msgstr ""

#: ../../writingscripts.rst:572
msgid ""
"The \"fog index\" of a passage of text estimates its reading difficulty, as "
"a number corresponding roughly to a school grade level. For example, a "
"passage with a fog index of 12 should be comprehensible to anyone with 12 "
"years of schooling."
msgstr ""

#: ../../writingscripts.rst:577
msgid "The Gunning version of the fog index uses the following algorithm."
msgstr ""

#: ../../writingscripts.rst:579
msgid "Choose a section of the text at least 100 words in length."
msgstr ""

#: ../../writingscripts.rst:581
msgid ""
"Count the number of sentences (a portion of a sentence truncated by the "
"boundary of the text section counts as one)."
msgstr ""

#: ../../writingscripts.rst:584
msgid "Find the average number of words per sentence."
msgstr ""

#: ../../writingscripts.rst:586
msgid "AVE\\_WDS\\_SEN = TOTAL\\_WORDS / SENTENCES"
msgstr ""

#: ../../writingscripts.rst:588
msgid ""
"Count the number of \"difficult\" words in the segment -- those containing "
"at least 3 syllables. Divide this quantity by total words to get the "
"proportion of difficult words."
msgstr ""

#: ../../writingscripts.rst:592
msgid "PRO\\_DIFF\\_WORDS = LONG\\_WORDS / TOTAL\\_WORDS"
msgstr ""

#: ../../writingscripts.rst:594
msgid ""
"The Gunning fog index is the sum of the above two quantities, multiplied by "
"0.4, then rounded to the nearest integer."
msgstr ""

#: ../../writingscripts.rst:597
msgid "G\\_FOG\\_INDEX = int ( 0.4 \\* ( AVE\\_WDS\\_SEN + PRO\\_DIFF\\_WORDS ) )"
msgstr ""

#: ../../writingscripts.rst:600
msgid ""
"Step 4 is by far the most difficult portion of the exercise. There exist "
"various algorithms for estimating the syllable count of a word. A rule-of-"
"thumb formula might consider the number of letters in a word and the vowel-"
"consonant mix."
msgstr ""

#: ../../writingscripts.rst:605
msgid ""
"A strict interpretation of the Gunning fog index does not count compound "
"words and proper nouns as \"difficult\" words, but this would enormously "
"complicate the script."
msgstr ""

#: ../../writingscripts.rst:610
msgid ""
"The Eighteenth Century French mathematician de Buffon came up with a novel "
"experiment. Repeatedly drop a needle of length ``                   n"
"                 `` onto a wooden floor composed of long and narrow parallel"
" boards. The cracks separating the equal-width floorboards are a fixed "
"distance ``                   d                 `` apart. Keep track of the "
"total drops and the number of times the needle intersects a crack on the "
"floor. The ratio of these two quantities turns out to be a fractional "
"multiple of PI."
msgstr ""

#: ../../writingscripts.rst:620
msgid ""
"In the spirit of `Example 16-50 <mathc.html#CANNON>`__ , write a script that"
" runs a Monte Carlo simulation of *Buffon's Needle* . To simplify matters, "
"set the needle length equal to the distance between the cracks, ``"
"                   n = d                 `` ."
msgstr ""

#: ../../writingscripts.rst:625
msgid ""
"Hint: there are actually two critical variables: the distance from the "
"center of the needle to the nearest crack, and the inclination angle of the "
"needle to that crack. You may use `bc <mathc.html#BCREF>`__ to handle the "
"calculations."
msgstr ""

#: ../../writingscripts.rst:631
msgid "Implement the Playfair (Wheatstone) Cipher in a script."
msgstr ""

#: ../../writingscripts.rst:633
msgid ""
"The Playfair Cipher encrypts text by substitution of *digrams* (2-letter "
"groupings). It is traditional to use a 5 x 5 letter scrambled-alphabet *key "
"square* for the encryption and decryption."
msgstr ""

#: ../../writingscripts.rst:709
msgid "This script will have three main sections"
msgstr ""

#: ../../writingscripts.rst:711
msgid "Generating the *key square* , based on a user-input keyword."
msgstr ""

#: ../../writingscripts.rst:713
msgid "Encrypting a *plaintext* message."
msgstr ""

#: ../../writingscripts.rst:715
msgid "Decrypting encrypted text."
msgstr ""

#: ../../writingscripts.rst:717
msgid ""
"The script will make extensive use of `arrays <arrays.html#ARRAYREF>`__ and "
"`functions <functions.html#FUNCTIONREF>`__ . You may use `Example A-56 "
"<contributed-scripts.html#GRONSFELD>`__ as an inspiration."
msgstr ""

#: ../../writingscripts.rst:723
msgid "--"
msgstr ""

#: ../../writingscripts.rst:725
msgid ""
"Please do not send the author your solutions to these exercises. There are "
"more appropriate ways to impress him with your cleverness, such as "
"submitting bugfixes and suggestions for improving the book."
msgstr ""

#: ../../writingscripts.rst:731
msgid "Notes"
msgstr ""

#: ../../writingscripts.rst:734
msgid "` [1]  <writingscripts.html#AEN25254>`__"
msgstr ""

#: ../../writingscripts.rst:736
msgid ""
"For all you clever types who failed intermediate algebra, a *determinant* is"
" a numerical value associated with a multidimensional *matrix* ( `array "
"<arrays.html#ARRAYREF>`__ of numbers)."
msgstr ""

#: ../../writingscripts.rst:745
msgid "of a 2 x 2 determinant:"
msgstr ""

#: ../../writingscripts.rst:747
msgid "|a  b| |b  a|"
msgstr ""

#: ../../writingscripts.rst:750
msgid "The solution is a*a"
msgstr ""

#: ../../writingscripts.rst:751
msgid "b*b, where \"a\" and \"b\""
msgstr ""

#: ../../writingscripts.rst:752
msgid "represent numbers."
msgstr ""
