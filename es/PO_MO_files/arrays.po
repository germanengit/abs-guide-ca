# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-28 12:11\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../arrays.rst:4
msgid "XXX  Chapter 27. Arrays"
msgstr ""

#: ../../arrays.rst:6
msgid ""
"Newer versions of Bash support one-dimensional arrays. Array elements may be"
" initialized with the ``             variable[xx]           `` notation. "
"Alternatively, a script may introduce the entire array by an explicit ``"
"             declare -a variable           `` statement. To dereference "
"(retrieve the contents of) an array element, use *curly bracket* notation, "
"that is, ``             ${element[xx]}           `` ."
msgstr ""

#: ../../arrays.rst:15
msgid "Exemple 1. Simple array usage"
msgstr ""

#: ../../arrays.rst:100
msgid ""
"As we have seen, a convenient way of initializing an entire array is the ``"
"      array=( element1 element2 ... elementN )     `` notation."
msgstr ""

#: ../../arrays.rst:116
msgid ""
"Bash permits array operations on variables, even if the variables are not "
"explicitly declared as arrays."
msgstr ""

#: ../../arrays.rst:136
msgid ""
"Once again this demonstrates that `Bash variables are untyped "
"<untyped.html#BVUNTYPED>`__ ."
msgstr ""

#: ../../arrays.rst:174
msgid "Exemple 2. Formatting a poem"
msgstr ""

#: ../../arrays.rst:223
msgid ""
"Array variables have a syntax all their own, and even standard Bash commands"
" and operators have special options adapted for array use."
msgstr ""

#: ../../arrays.rst:228
msgid "Exemple 3. Various array operations"
msgstr ""

#: ../../arrays.rst:284
msgid ""
"Many of the standard `string operations <string-"
"manipulation.html#STRINGMANIP>`__ work on arrays."
msgstr ""

#: ../../arrays.rst:289
msgid "Exemple 4. String operations on arrays"
msgstr ""

#: ../../arrays.rst:416
msgid ""
"`Command substitution <commandsub.html#COMMANDSUBREF>`__ can construct the "
"individual elements of an array."
msgstr ""

#: ../../arrays.rst:421
msgid "Exemple 5. Loading the contents of a script into an array"
msgstr ""

#: ../../arrays.rst:459
msgid ""
"In an array context, some Bash `builtins <internal.html#BUILTINREF>`__ have "
"a slightly altered meaning. For example, `unset <internal.html#UNSETREF>`__ "
"deletes array elements, or even an entire array."
msgstr ""

#: ../../arrays.rst:466
msgid "Exemple 6. Some special properties of arrays"
msgstr ""

#: ../../arrays.rst:538
msgid ""
"As seen in the previous example, either **${array\\_name[@]}** or "
"**${array\\_name[\\*]}** refers to *all* the elements of the array. "
"Similarly, to get a count of the number of elements in an array, use either "
"**${#array\\_name[@]}** or **${#array\\_name[\\*]}** . **${#array\\_name}** "
"is the length (number of characters) of **${array\\_name[0]}** , the first "
"element of the array."
msgstr ""

#: ../../arrays.rst:547
msgid "Exemple 7. Of empty arrays and empty elements"
msgstr ""

#: ../../arrays.rst:713
msgid ""
"The relationship of **${array\\_name[@]}** and **${array\\_name[\\*]}** is "
"analogous to that between `$@ and $\\* <internalvariables.html#APPREF>`__ . "
"This powerful array notation has a number of uses."
msgstr ""

#: ../../arrays.rst:751
msgid "Tip"
msgstr ""

#: ../../arrays.rst:753
msgid ""
"The **array=( element1 element2 ... elementN )** initialization operation, "
"with the help of `command substitution <commandsub.html#COMMANDSUBREF>`__ , "
"makes it possible to load the contents of a text file into an array."
msgstr ""

#: ../../arrays.rst:768
msgid "# #            1 a b c #            2 d e f"
msgstr ""

#: ../../arrays.rst:771
msgid "g"
msgstr ""

#: ../../arrays.rst:774
msgid "declare -a array1"
msgstr ""

#: ../../arrays.rst:776
msgid "array1=( `cat \"$file"
msgstr ""

#: ../../arrays.rst:779
msgid "#         List file"
msgstr ""

#: ../../arrays.rst:780
msgid "to stdout              # + of $filename into arra y1."
msgstr ""

#: ../../arrays.rst:783
msgid "# #  array1=( `cat \"$f"
msgstr ""

#: ../../arrays.rst:787
msgid "change linefeed"
msgstr ""

#: ../../arrays.rst:789
msgid "#  Not necessary bec"
msgstr ""

#: ../../arrays.rst:790
msgid "ause Bash does word spli tting,"
msgstr ""

#: ../../arrays.rst:792
msgid "#+ changing linefeed"
msgstr ""

#: ../../arrays.rst:793
msgid "s to spaces."
msgstr ""

#: ../../arrays.rst:796
msgid "# List the arra"
msgstr ""

#: ../../arrays.rst:799
msgid "1 a b c 2 d e"
msgstr ""

#: ../../arrays.rst:801
msgid "# #  Each whitespace-s"
msgstr ""

#: ../../arrays.rst:803
msgid "eparated \"word\" in the f ile"
msgstr ""

#: ../../arrays.rst:805
msgid "#+ has been assigned"
msgstr ""

#: ../../arrays.rst:806
msgid "to an element of the ar"
msgstr ""

#: ../../arrays.rst:807
msgid "ray."
msgstr ""

#: ../../arrays.rst:809
msgid "element_count=${#arr"
msgstr ""

#: ../../arrays.rst:812
msgid "# 8"
msgstr ""

#: ../../arrays.rst:884
msgid "Clever scripting makes it possible to add array operations."
msgstr ""

#: ../../arrays.rst:888
msgid "Exemple 8. Initializing arrays"
msgstr ""

#: ../../arrays.rst:987
msgid "|Note"
msgstr ""

#: ../../arrays.rst:989
msgid ""
"Adding a superfluous **declare -a** statement to an array declaration may "
"speed up execution of subsequent operations on the array."
msgstr ""

#: ../../arrays.rst:997
msgid "Exemple 9. Copying and concatenating arrays"
msgstr ""

#: ../../arrays.rst:1073
msgid "Exemple 10. More on concatenating arrays"
msgstr ""

#: ../../arrays.rst:1194 ../../arrays.rst:1308 ../../arrays.rst:1344
#: ../../arrays.rst:1428 ../../arrays.rst:1631 ../../arrays.rst:1766
#: ../../arrays.rst:1842 ../../arrays.rst:2007
msgid "--"
msgstr ""

#: ../../arrays.rst:1196
msgid ""
"Arrays permit deploying old familiar algorithms as shell scripts. Whether "
"this is necessarily a good idea is left for the reader to decide."
msgstr ""

#: ../../arrays.rst:1202
msgid "Exemple 11. The Bubble Sort"
msgstr ""

#: ../../arrays.rst:1310
msgid "Is it possible to nest arrays within arrays?"
msgstr ""

#: ../../arrays.rst:1346
msgid ""
"Embedded arrays in combination with `indirect references "
"<bashver2.html#VARREFNEW>`__ create some fascinating possibilities"
msgstr ""

#: ../../arrays.rst:1352
msgid "Exemple 12. Embedded arrays and indirect references"
msgstr ""

#: ../../arrays.rst:1430
msgid ""
"Arrays enable implementing a shell script version of the *Sieve of "
"Eratosthenes* . Of course, a resource-intensive application of this nature "
"should really be written in a compiled language, such as C. It runs "
"excruciatingly slowly as a script."
msgstr ""

#: ../../arrays.rst:1437
msgid "Exemple 13. The Sieve of Eratosthenes"
msgstr ""

#: ../../arrays.rst:1582
msgid "Exemple 14. The Sieve of Eratosthenes, Optimized"
msgstr ""

#: ../../arrays.rst:1627
msgid ""
"Compare these array-based prime number generators with alternatives that do "
"not use arrays, `Example A-15 <contributed-scripts.html#PRIMES>`__ , and "
"`Example 16-46 <mathc.html#PRIMES2>`__ ."
msgstr ""

#: ../../arrays.rst:1633
msgid ""
"Arrays lend themselves, to some extent, to emulating data structures for "
"which Bash has no native support."
msgstr ""

#: ../../arrays.rst:1638
msgid "Exemple 15. Emulating a push-down stack"
msgstr ""

#: ../../arrays.rst:1768
msgid ""
"Fancy manipulation of array \"subscripts\" may require intermediate "
"variables. For projects involving this, again consider using a more powerful"
" programming language, such as Perl or C."
msgstr ""

#: ../../arrays.rst:1774
msgid ""
"Exemple 16. Complex array application: *Exploring a weird mathematical "
"series*"
msgstr ""

#: ../../arrays.rst:1844
msgid ""
"Bash supports only one-dimensional arrays, though a little trickery permits "
"simulating multi-dimensional ones."
msgstr ""

#: ../../arrays.rst:1849
msgid "Exemple 17. Simulating a two-dimensional array, then tilting it"
msgstr ""

#: ../../arrays.rst:2000
msgid ""
"A two-dimensional array is essentially equivalent to a one-dimensional one, "
"but with additional addressing modes for referencing and manipulating the "
"individual elements by *row* and *column* position."
msgstr ""

#: ../../arrays.rst:2004
msgid ""
"For an even more elaborate example of simulating a two-dimensional array, "
"see `Example A-10 <contributed-scripts.html#LIFESLOW>`__ ."
msgstr ""

#: ../../arrays.rst:2009
msgid "For more interesting scripts using arrays, see:"
msgstr ""

#: ../../arrays.rst:2011
msgid "`Example 12-3 <commandsub.html#AGRAM2>`__"
msgstr ""

#: ../../arrays.rst:2013
msgid "`Example 16-46 <mathc.html#PRIMES2>`__"
msgstr ""

#: ../../arrays.rst:2015
msgid "`Example A-22 <contributed-scripts.html#HASHEX2>`__"
msgstr ""

#: ../../arrays.rst:2017
msgid "`Example A-44 <contributed-scripts.html#HOMEWORK>`__"
msgstr ""

#: ../../arrays.rst:2019
msgid "`Example A-41 <contributed-scripts.html#QKY>`__"
msgstr ""

#: ../../arrays.rst:2021
msgid "`Example A-42 <contributed-scripts.html#NIM>`__"
msgstr ""
