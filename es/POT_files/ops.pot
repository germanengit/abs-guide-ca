# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Moisès Gómez, Germán Alonso
# This file is distributed under the same license as the Traducció abs-guide branca git gettext-way package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Traducció abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-28 12:11\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ops.rst:3
# 1f896a325c8f46dd907949bded9cfd9a
msgid "XXX  8.1. Operators"
msgstr ""

#: ../../ops.rst:6
# efb8fdd47e554121a98a2dd13ca3a7ec
msgid "** assignment**"
msgstr ""

#: ../../ops.rst:9
# c7996c8c70e2463699f9fd40843486fc
msgid "Initializing or changing the value of a variable"
msgstr ""

#: ../../ops.rst:12
# 028c418f1f8e44418483a2e2db5ec1db
msgid "All-purpose assignment operator, which works for both arithmetic and string assignments."
msgstr ""

#: ../../ops.rst:27
# 82e551b1226149a5939e9d1e92084c34
msgid "Do not confuse the \"=\" assignment operator with the `= test operator <comparison-ops.html#EQUALSIGNREF>`__ ."
msgstr ""

#: ../../ops.rst:35
# 67e486354fb94b10aac538472b1d2a53
msgid "rator"
msgstr ""

#: ../../ops.rst:37
# e59af72a5a344cf6975547e9678d9f34
msgid "if [ \"$string1\" = \"$"
msgstr ""

#: ../../ops.rst:40
# 278ec87413ae46de92cd02e89e808236
msgid "command"
msgstr ""

#: ../../ops.rst:41
# 2414a8518d974c4b85e9bb84a77f7e01
msgid "fi"
msgstr ""

#: ../../ops.rst:43
# 551e52cacca34357b76c6f4b47646aa9
msgid "#  if [ \"X$string1\""
msgstr ""

#: ../../ops.rst:44
# a73c98e02162459f8c0acbf7b29e348b
msgid "= \"X$string2\" ] is safer ,"
msgstr ""

#: ../../ops.rst:46
# 19eae3e837204066a3576e78c4d46fc1
msgid "#+ to prevent an err"
msgstr ""

#: ../../ops.rst:49
# f6a24a5e0b7249a2b4c969f32f2e4de7
msgid "#  (The prepended \"X"
msgstr ""

#: ../../ops.rst:50
# 5b898d9786274403aa11fae8432614b2
msgid "\" characters cancel out. )"
msgstr ""

#: ../../ops.rst:89
# 80ff1657f8e9451bbc2c95a2053c31c4
msgid "** arithmetic operators**"
msgstr ""

#: ../../ops.rst:92
# 3084570cfc44427282d4c1d31f422da4
msgid "plus"
msgstr ""

#: ../../ops.rst:95
# 2d26fd38d97f40188b734bb628b96a00
msgid "minus"
msgstr ""

#: ../../ops.rst:98
# c75f4ef2e8834e1d919baa82fe3b9e4d
msgid "multiplication"
msgstr ""

#: ../../ops.rst:101
# 5a787bee72a546b4a69d63c0189810ef
msgid "division"
msgstr ""

#: ../../ops.rst:104
# 39518c02bc564ff691697698cc8cd9f0
msgid "exponentiation"
msgstr ""

#: ../../ops.rst:117
# b442f5360926442ab492005a716f7dcc
msgid "modulo, or mod (returns the *remainder* of an integer division operation)"
msgstr ""

#: ../../ops.rst:129
# e9a46ac3bc0b44b4a61b68caee2b38b9
msgid "*5/3 = 1, with remainder 2*"
msgstr ""

#: ../../ops.rst:131
# ab094a9526e641b5ba7723e3d7b3414a
msgid "This operator finds use in, among other things, generating numbers within a specific range (see `Example 9-11 <randomvar.html#EX21>`__ and `Example 9-15 <randomvar.html#RANDOMTEST>`__ ) and formatting program output (see `Example 27-16 <arrays.html#QFUNCTION>`__ and `Example A-6 <contributed-scripts.html#COLLATZ>`__ ). It can even be used to generate prime numbers, (see `Example A-15 <contributed-scripts.html#PRIMES>`__ ). Modulo turns up surprisingly often in numerical recipes."
msgstr ""

#: ../../ops.rst:142
# 61f8a357c5684b3781c14f2a1370f04b
msgid "Exemple 1. Greatest common divisor"
msgstr ""

#: ../../ops.rst:216
# a110bd8ad8f640c283ff8781654a4a37
msgid "<ops.html#FTN.AEN3907>`__"
msgstr ""

#: ../../ops.rst:218
# 0403986d4fae431f8cc70c97d99abc5c
msgid "``                   let \"var += 5\"                 `` results in ``                   var                 `` being incremented by ``         5        `` ."
msgstr ""

#: ../../ops.rst:223
# c181b35f4811408998112c2265cbd697
msgid "*minus-equal* (decrement variable by a constant)"
msgstr ""

#: ../../ops.rst:226
# dab410114a5042128e94f1aaf4830eb1
msgid "*times-equal* (multiply variable by a constant)"
msgstr ""

#: ../../ops.rst:228
# b16ced7d2c584aa29d5a8f6c92dfa7da
msgid "``                   let \"var *= 4\"                 `` results in ``                   var                 `` being multiplied by ``         4        `` ."
msgstr ""

#: ../../ops.rst:233
# 432778d965a44ae3a4d9d9b7f8b0be62
msgid "*slash-equal* (divide variable by a constant)"
msgstr ""

#: ../../ops.rst:236
# 031c8b76d84a4b0d89ba9e4b0d74a785
msgid "*mod-equal* ( *remainder* of dividing variable by a constant)"
msgstr ""

#: ../../ops.rst:238
# becea3d7f7694594b028c94f6eca320f
msgid "*Arithmetic operators often occur in an `expr <moreadv.html#EXPRREF>`__ or `let <internal.html#LETREF>`__ expression.*"
msgstr ""

#: ../../ops.rst:245
# 07bc8878c90846fbba5efc17ed4332bb
msgid "Exemple 2. Ús dels operadors aritmètics"
msgstr ""

#: ../../ops.rst:309
#: ../../ops.rst:525
#: ../../ops.rst:551
# 10097202b6b34d20a37e535b0dd75008
# af5dc0e3fa864dbbab2fdc35808f3eef
# f70ee0df4fa8497db204586b6c24bbd9
msgid "|Note"
msgstr ""

#: ../../ops.rst:311
# 9d79fdeff5634624bd1ba7ff9c418dda
msgid "Integer variables in older versions of Bash were signed *long* (32-bit) integers, in the range of -2147483648 to 2147483647. An operation that took a variable outside these limits gave an erroneous result."
msgstr ""

#: ../../ops.rst:332
# c0950732bd5a401896396da528595619
msgid "echo \"a = $a\""
msgstr ""

#: ../../ops.rst:333
# 1f287cf7153243628029e12a7da86233
msgid "# a = -2147483648"
msgstr ""

#: ../../ops.rst:335
# c66d4e97eafe45d7914b7ffff1f34938
msgid "#      ERROR: out of ra"
msgstr ""

#: ../../ops.rst:336
# 45a892f114db43bbaf1e1a2ff73d6dfa
msgid "nge,"
msgstr ""

#: ../../ops.rst:338
# ddf9bc8178cb46c0a0dfd5c9a77dd2a3
msgid "# +    and the leftmost bit, the sign bit,"
msgstr ""

#: ../../ops.rst:341
# 6f95caf17ebc4c33b27373cb4adb5ce0
msgid "# +    has been set, ma"
msgstr ""

#: ../../ops.rst:342
# 243b3f47e4a34c7dbc678cf47b725037
msgid "king the result negative ."
msgstr ""

#: ../../ops.rst:348
# 5e53771b92044171950c6e833fb237b8
msgid "As of version >= 2.05b, Bash supports 64-bit integers."
msgstr ""

#: ../../ops.rst:387
# e6f5b943b6584e2d80eef4e79974f955
msgid "Bash does not understand floating point arithmetic. It treats numbers containing a decimal point as strings."
msgstr ""

#: ../../ops.rst:398
# 9f58f17275cf4430a244540fe5ac566c
msgid "# t2.sh: let: b = 1."
msgstr ""

#: ../../ops.rst:402
# a03e951504cd435abfdcc131132e487e
msgid "(error token is"
msgstr ""

#: ../../ops.rst:403
# 2f83e5d8630647d9b26c25dd35c9d126
msgid "\".5 + 1.3\")"
msgstr ""

#: ../../ops.rst:405
# 7d0e836227d948229b4994df00a3250e
msgid "echo \"b = $b\""
msgstr ""

#: ../../ops.rst:406
# 7c2e32ff581c49c787026913d60dbc5b
msgid "# b=1"
msgstr ""

#: ../../ops.rst:411
# fa3f30fdedd34f05a085b3b115a959c9
msgid "Use `bc <mathc.html#BCREF>`__ in scripts that that need floating point calculations or math library functions."
msgstr ""

#: ../../ops.rst:440
# dad3199ec556455fb60950ff21065fbc
msgid "**bitwise operators.** The bitwise operators seldom make an appearance in shell scripts. Their chief use seems to be manipulating and testing values read from ports or `sockets <devref1.html#SOCKETREF>`__ . \"Bit flipping\" is more relevant to compiled languages, such as C and C++, which provide direct access to system hardware. However, see *vladz's* ingenious use of bitwise operators in his *base64.sh* ( `Example A-54 <contributed-scripts.html#BASE64>`__ ) script."
msgstr ""

#: ../../ops.rst:450
# a75ef096543447f68c907834397d3f2f
msgid "** bitwise operators**"
msgstr ""

#: ../../ops.rst:453
# 267deb7bcb2e410e85ef295eb4efb943
msgid "bitwise left shift (multiplies by ``         2        `` for each shift position)"
msgstr ""

#: ../../ops.rst:457
# 9fe531589376468a8bb6ee94e1088f76
msgid "*left-shift-equal*"
msgstr ""

#: ../../ops.rst:459
# a904034e2b3449409ded776cac1a5598
msgid "``                   let \"var <<= 2\"                 `` results in ``                   var                 `` left-shifted ``         2        `` bits (multiplied by ``         4        `` )"
msgstr ""

#: ../../ops.rst:464
# f430d212ed124e00beb39f3efaf1747d
msgid "bitwise right shift (divides by ``         2        `` for each shift position)"
msgstr ""

#: ../../ops.rst:468
# 086605e1cb1d4219bbb76480096ac54d
msgid "*right-shift-equal* (inverse of <<= )"
msgstr ""

#: ../../ops.rst:471
# 0f97d882546d42f68172a120e812c6d4
msgid "bitwise AND"
msgstr ""

#: ../../ops.rst:474
# 85b0107fabf24293808b3d4dfde6b254
msgid "bitwise *AND-equal*"
msgstr ""

#: ../../ops.rst:477
# 64bfca04de8743bba0cd0c67007be162
msgid "bitwise OR"
msgstr ""

#: ../../ops.rst:480
# 53d75976505a4ec2991e824d058668fb
msgid "bitwise *OR-equal*"
msgstr ""

#: ../../ops.rst:483
# c9b3ee732f2148c5be56549868c1c38d
msgid "bitwise NOT"
msgstr ""

#: ../../ops.rst:486
# 24f36bcb240342db9ada6d9fbf7bdc10
msgid "bitwise XOR"
msgstr ""

#: ../../ops.rst:489
# b78c6b6942ce422da1b556a7f0b2a9c5
msgid "bitwise *XOR-equal*"
msgstr ""

#: ../../ops.rst:493
# 0b2e7cf6b3de47b8907aab8cd243c387
msgid "** logical (boolean) operators**"
msgstr ""

#: ../../ops.rst:496
# aed765aba04a4e0cb03a856d07521193
msgid "NOT"
msgstr ""

#: ../../ops.rst:508
# a752c07f31c94008a11c202dd62568a5
msgid "AND"
msgstr ""

#: ../../ops.rst:527
# ae4d3d39547148fbbec8a40e0c5a7176
msgid "&& may also be used, depending on context, in an `and"
msgstr ""

#: ../../ops.rst:528
# 95c7d31b93174db4a4c23205166755d6
msgid "list <list-cons.html#LISTCONSREF>`__ to concatenate commands."
msgstr ""

#: ../../ops.rst:534
# 323067fc54d24b5bb48b0420c572d3c2
msgid "OR"
msgstr ""

#: ../../ops.rst:553
# 2d04038d36b7411e8b876c0b0a3019cc
msgid "Bash tests the `exit status <exit-status.html#EXITSTATUSREF>`__ of each statement linked with a logical operator."
msgstr ""

#: ../../ops.rst:561
# a28c51752d0f4e1398338ee0e448438f
msgid "Exemple 3. Compound Condition Tests Using && and \\|\\"
msgstr ""

#: ../../ops.rst:632
# c415a3f786124928aaba3c4a51161429
msgid "The && and \\|\\operators also find use in an arithmetic context."
msgstr ""

#: ../../ops.rst:645
# ce4f6c5a82e84cba8d02ac268b8fc0c3
msgid "** miscellaneous operators**"
msgstr ""

#: ../../ops.rst:648
# cbd150df27ab4161961688e3784e56c3
msgid "Comma operator"
msgstr ""

#: ../../ops.rst:650
# 04f7bff55e39459fbd7eb17cebf8fa34
msgid "The **comma operator** chains together two or more arithmetic operations. All the operations are evaluated (with possible *side effects* . ` [2]  <ops.html#FTN.AEN4242>`__"
msgstr ""

#: ../../ops.rst:666
# 80c121538b364319b5ce4e7368955315
msgid "The comma operator finds use mainly in `for loops <loops1.html#FORLOOPREF1>`__ . See `Example 11-13 <loops1.html#FORLOOPC>`__ ."
msgstr ""

#: ../../ops.rst:673
# 740d2bc46473492eb7d3eeb30c18f5e1
msgid "Notes"
msgstr ""

#: ../../ops.rst:676
# b1562c086d91429f8d4769debcefdfff
msgid "` [1]  <ops.html#AEN3907>`__"
msgstr ""

#: ../../ops.rst:678
# 5fe5cd3756d047f7ad8ed83698f95694
msgid "In a different context, **+=** can serve as a *string concatenation* operator. This can be useful for `modifying *environmental variables* <bashver3.html#PATHAPPEND>`__ ."
msgstr ""

#: ../../ops.rst:683
# 70c1bd5f4fa24bea91a5b871e98e5c2c
msgid "` [2]  <ops.html#AEN4242>`__"
msgstr ""

#: ../../ops.rst:685
# 5b4d1336a67f4e50b2ab272cdc81357b
msgid "*Side effects* are, of course, unintended -- and usually undesirable -- consequences."
msgstr ""

