# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-27 20:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../optimizations.rst:4
msgid "XXX  36.6. Optimizations"
msgstr ""

#: ../../optimizations.rst:6
msgid ""
"Most shell scripts are quick 'n dirty solutions to non-complex problems. As "
"such, optimizing them for speed is not much of an issue. Consider the case, "
"though, where a script carries out an important task, does it well, but runs"
" too slowly. Rewriting it in a compiled language may not be a palatable "
"option. The simplest fix would be to rewrite the parts of the script that "
"slow it down. Is it possible to apply principles of code optimization even "
"to a lowly shell script?"
msgstr ""

#: ../../optimizations.rst:14
msgid ""
"Check the loops in the script. Time consumed by repetitive operations adds "
"up quickly. If at all possible, remove time-consuming operations from within"
" loops."
msgstr ""

#: ../../optimizations.rst:18
msgid ""
"Use `builtin <internal.html#BUILTINREF>`__ commands in preference to system "
"commands. Builtins execute faster and usually do not launch a subshell when "
"invoked."
msgstr ""

#: ../../optimizations.rst:22
msgid ""
"Avoid unnecessary commands, particularly in a `pipe <special-"
"chars.html#PIPEREF>`__ ."
msgstr ""

#: ../../optimizations.rst:37
msgid ""
"The `cat <basic.html#CATREF>`__ command seems especially prone to overuse in"
" scripts."
msgstr ""

#: ../../optimizations.rst:42
msgid "Disabling certain Bash options can speed up scripts."
msgstr ""

#: ../../optimizations.rst:44
msgid "As Erik Brandsberg points out:"
msgstr ""

#: ../../optimizations.rst:46
msgid ""
"If you don't need `Unicode <bashver4.html#UNICODEREF>`__ support, you can "
"get potentially a 2x or more improvement in speed by simply setting the ``"
"                   LC_ALL                 `` variable."
msgstr ""

#: ../../optimizations.rst:156 ../../optimizations.rst:345
msgid "|Note"
msgstr ""

#: ../../optimizations.rst:158
msgid ""
"Certain operators, notably `expr <moreadv.html#EXPRREF>`__ , are very "
"inefficient and might be replaced by `double parentheses <dblparens.html>`__"
" arithmetic expansion. See `Example A-59 <contributed-"
"scripts.html#TESTEXECTIME>`__ ."
msgstr ""

#: ../../optimizations.rst:172
msgid "user          0m0.28"
msgstr ""

#: ../../optimizations.rst:174 ../../optimizations.rst:190
#: ../../optimizations.rst:212 ../../optimizations.rst:222
#: ../../optimizations.rst:242 ../../optimizations.rst:366
#: ../../optimizations.rst:393 ../../optimizations.rst:402
#: ../../optimizations.rst:420 ../../optimizations.rst:449
#: ../../optimizations.rst:459 ../../optimizations.rst:468
msgid "sys           0m0.00"
msgstr ""

#: ../../optimizations.rst:175 ../../optimizations.rst:223
#: ../../optimizations.rst:441
msgid "8s"
msgstr ""

#: ../../optimizations.rst:177
msgid "math via expr: real          1m17.8"
msgstr ""

#: ../../optimizations.rst:180
msgid "user          0m3.60"
msgstr ""

#: ../../optimizations.rst:182
msgid "sys           0m8.76"
msgstr ""

#: ../../optimizations.rst:183
msgid "5s"
msgstr ""

#: ../../optimizations.rst:185
msgid "math via let: real          0m0.36"
msgstr ""

#: ../../optimizations.rst:188
msgid "user          0m0.37"
msgstr ""

#: ../../optimizations.rst:191 ../../optimizations.rst:213
#: ../../optimizations.rst:243 ../../optimizations.rst:421
#: ../../optimizations.rst:450 ../../optimizations.rst:469
msgid "0s"
msgstr ""

#: ../../optimizations.rst:196
msgid ""
"`Condition testing <tests.html#IFTHEN>`__ constructs in scripts deserve "
"close scrutiny. Substitute `case <testbranch.html#CASEESAC1>`__ for `if-then"
" <tests.html#IFTHEN>`__ constructs and combine tests when possible, to "
"minimize script execution time. Again, refer to `Example A-59 <contributed-"
"scripts.html#TESTEXECTIME>`__ ."
msgstr ""

#: ../../optimizations.rst:208
msgid "real          0m0.32"
msgstr ""

#: ../../optimizations.rst:210
msgid "user          0m0.32"
msgstr ""

#: ../../optimizations.rst:216
msgid "Test with if [], no"
msgstr ""

#: ../../optimizations.rst:218
msgid "real          0m0.43"
msgstr ""

#: ../../optimizations.rst:220
msgid "user          0m0.43"
msgstr ""

#: ../../optimizations.rst:226
msgid "Test with if [], quo"
msgstr ""

#: ../../optimizations.rst:228
msgid "real          0m0.47"
msgstr ""

#: ../../optimizations.rst:230 ../../optimizations.rst:240
msgid "user          0m0.45"
msgstr ""

#: ../../optimizations.rst:232 ../../optimizations.rst:440
msgid "sys           0m0.02"
msgstr ""

#: ../../optimizations.rst:233 ../../optimizations.rst:367
#: ../../optimizations.rst:394 ../../optimizations.rst:403
#: ../../optimizations.rst:460
msgid "4s"
msgstr ""

#: ../../optimizations.rst:236
msgid "Test with if [], usi"
msgstr ""

#: ../../optimizations.rst:238
msgid "real          0m0.45"
msgstr ""

#: ../../optimizations.rst:347
msgid ""
"Erik Brandsberg recommends using `associative arrays "
"<bashver4.html#ASSOCARR>`__ in preference to conventional numeric-indexed "
"arrays in most cases. When overwriting values in a numeric array, there is a"
" significant performance penalty vs. associative arrays. Running a test "
"script confirms this. See `Example A-60 <contributed-"
"scripts.html#ASSOCARRTEST>`__ ."
msgstr ""

#: ../../optimizations.rst:362
msgid "real          0m0.41"
msgstr ""

#: ../../optimizations.rst:364 ../../optimizations.rst:391
msgid "user          0m0.41"
msgstr ""

#: ../../optimizations.rst:369
msgid "Assigning a numeric"
msgstr ""

#: ../../optimizations.rst:371
msgid "real          0m0.58"
msgstr ""

#: ../../optimizations.rst:373
msgid "user          0m0.56"
msgstr ""

#: ../../optimizations.rst:375 ../../optimizations.rst:384
#: ../../optimizations.rst:411 ../../optimizations.rst:430
msgid "sys           0m0.01"
msgstr ""

#: ../../optimizations.rst:376 ../../optimizations.rst:385
#: ../../optimizations.rst:431
msgid "6s"
msgstr ""

#: ../../optimizations.rst:378
msgid "Overwriting a numeri"
msgstr ""

#: ../../optimizations.rst:380
msgid "real          0m21.9"
msgstr ""

#: ../../optimizations.rst:382
msgid "user          0m21.9"
msgstr ""

#: ../../optimizations.rst:387
msgid "Linear reading of nu"
msgstr ""

#: ../../optimizations.rst:389 ../../optimizations.rst:416
msgid "real          0m0.42"
msgstr ""

#: ../../optimizations.rst:396
msgid "Assigning an associa"
msgstr ""

#: ../../optimizations.rst:398
msgid "real          0m1.80"
msgstr ""

#: ../../optimizations.rst:400
msgid "user          0m1.79"
msgstr ""

#: ../../optimizations.rst:405
msgid "Overwriting an assoc"
msgstr ""

#: ../../optimizations.rst:407
msgid "real          0m1.79"
msgstr ""

#: ../../optimizations.rst:409
msgid "user          0m1.78"
msgstr ""

#: ../../optimizations.rst:412
msgid "2s"
msgstr ""

#: ../../optimizations.rst:414
msgid "Linear reading an as"
msgstr ""

#: ../../optimizations.rst:418
msgid "user          0m0.42"
msgstr ""

#: ../../optimizations.rst:423
msgid "Assigning a random n"
msgstr ""

#: ../../optimizations.rst:424
msgid "umber to a simple variab le"
msgstr ""

#: ../../optimizations.rst:426
msgid "real          0m0.40"
msgstr ""

#: ../../optimizations.rst:428
msgid "user          0m0.38"
msgstr ""

#: ../../optimizations.rst:433
msgid "Assigning a sparse n"
msgstr ""

#: ../../optimizations.rst:436
msgid "real          0m12.6"
msgstr ""

#: ../../optimizations.rst:438
msgid "user          0m12.6"
msgstr ""

#: ../../optimizations.rst:443
msgid "Reading sparse numer"
msgstr ""

#: ../../optimizations.rst:445 ../../optimizations.rst:464
msgid "real          0m0.08"
msgstr ""

#: ../../optimizations.rst:447 ../../optimizations.rst:466
msgid "user          0m0.08"
msgstr ""

#: ../../optimizations.rst:452
msgid "Assigning a sparse a"
msgstr ""

#: ../../optimizations.rst:453
msgid "ssociative array entry r andomly into 64k cells"
msgstr ""

#: ../../optimizations.rst:455
msgid "real          0m0.69"
msgstr ""

#: ../../optimizations.rst:457
msgid "user          0m0.69"
msgstr ""

#: ../../optimizations.rst:462
msgid "Reading sparse assoc"
msgstr ""

#: ../../optimizations.rst:607
msgid ""
"Use the `time <timedate.html#TIMREF>`__ and `times <x9644.html#TIMESREF>`__ "
"tools to profile computation-intensive commands. Consider rewriting time-"
"critical code sections in C, or even in assembler."
msgstr ""

#: ../../optimizations.rst:612
msgid ""
"Try to minimize file I/O. Bash is not particularly efficient at handling "
"files, so consider using more appropriate tools for this within the script, "
"such as `awk <awk.html#AWKREF>`__ or `Perl <wrapper.html#PERLREF>`__ ."
msgstr ""

#: ../../optimizations.rst:618
msgid "<optimizations.html#FTN.AEN20452>`__ so they can be reorganized and"
msgstr ""

#: ../../optimizations.rst:619
msgid ""
"tightened up as necessary. Some of the optimization techniques applicable to"
" high-level languages may work for scripts, but others, such as *loop "
"unrolling* , are mostly irrelevant. Above all, use common sense."
msgstr ""

#: ../../optimizations.rst:624
msgid ""
"For an excellent demonstration of how optimization can dramatically reduce "
"the execution time of a script, see `Example 16-47 "
"<mathc.html#MONTHLYPMT>`__ ."
msgstr ""

#: ../../optimizations.rst:630
msgid "Notes"
msgstr ""

#: ../../optimizations.rst:633
msgid "` [1]  <optimizations.html#AEN20452>`__"
msgstr ""

#: ../../optimizations.rst:635
msgid ""
"This usually means liberal use of `functions <functions.html#FUNCTIONREF>`__"
" ."
msgstr ""
