# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-28 12:11\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sedawk.rst:4
msgid "XXX  Appendix C. A Sed and Awk Micro-Primer"
msgstr ""

#: ../../sedawk.rst:9
msgid "**Table of Contents**"
msgstr ""

#: ../../sedawk.rst:13
msgid "C.1. `Sed <x23170.html>`__"
msgstr ""

#: ../../sedawk.rst:17
msgid "C.2. `Awk <awk.html>`__"
msgstr ""

#: ../../sedawk.rst:22
msgid ""
"This is a very brief introduction to the **sed** and **awk** text processing"
" utilities. We will deal with only a few basic commands here, but that will "
"suffice for understanding simple sed and awk constructs within shell "
"scripts."
msgstr ""

#: ../../sedawk.rst:27
msgid "**sed** : a non-interactive text file editor"
msgstr ""

#: ../../sedawk.rst:29
msgid ""
"**awk** : a field-oriented pattern processing language with a **C** -style "
"syntax"
msgstr ""

#: ../../sedawk.rst:32
msgid ""
"For all their differences, the two utilities share a similar invocation "
"syntax, use `regular expressions <regexp.html#REGEXREF>`__ , read input by "
"default from ``      stdin     `` , and output to ``      stdout     `` . "
"These are well-behaved UNIX tools, and they work together well. The output "
"from one can be piped to the other, and their combined capabilities give "
"shell scripts some of the power of `Perl <wrapper.html#PERLREF>`__ ."
msgstr ""

#: ../../sedawk.rst:42
msgid "|Note"
msgstr ""

#: ../../sedawk.rst:44
msgid ""
"One important difference between the utilities is that while shell scripts "
"can easily pass arguments to sed, it is more cumbersome for awk (see "
"`Example 36-5 <wrapper.html#COLTOTALER>`__ and `Example 28-2 "
"<ivr.html#COLTOTALER2>`__ )."
msgstr ""
