# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-28 12:11\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../debugging.rst:4
msgid "XXX  Chapter 32. Debugging"
msgstr ""

#: ../../debugging.rst:7
msgid "**"
msgstr ""

#: ../../debugging.rst:9
msgid ""
"*Debugging is twice as hard as writing the code in the first place. "
"Therefore, if you write the code as cleverly as possible, you are, by "
"definition, not smart enough to debug it.*"
msgstr ""

#: ../../debugging.rst:13
msgid "*--Brian Kernighan*"
msgstr ""

#: ../../debugging.rst:17
msgid ""
"The Bash shell contains no built-in debugger, and only bare-bones debugging-"
"specific commands and constructs. Syntax errors or outright typos in the "
"script generate cryptic error messages that are often of no help in "
"debugging a non-functional script."
msgstr ""

#: ../../debugging.rst:24
msgid "Exemple 1. A buggy script"
msgstr ""

#: ../../debugging.rst:47 ../../debugging.rst:84
msgid "Output from script:"
msgstr ""

#: ../../debugging.rst:56
msgid "What's wrong with the above script? Hint: after the *if* ."
msgstr ""

#: ../../debugging.rst:60
msgid "Exemple 2. Missing `keyword <internal.html#KEYWORDREF>`__"
msgstr ""

#: ../../debugging.rst:94
msgid ""
"Note that the error message does *not* necessarily reference the line in "
"which the error occurs, but the line where the Bash interpreter finally "
"becomes aware of the error. Error messages may disregard comment lines in a "
"script when reporting the line number of a syntax error."
msgstr ""

#: ../../debugging.rst:100
msgid ""
"What if the script executes, but does not work as expected? This is the all "
"too familiar logic error."
msgstr ""

#: ../../debugging.rst:105
msgid "Exemple 3. *test24* : another buggy script"
msgstr ""

#: ../../debugging.rst:130
msgid ""
"Try to find out what's wrong with `Example 32-3 <debugging.html#EX75>`__ by "
"uncommenting the ``             echo \"$badname\"           `` line. Echo "
"statements are useful for seeing whether what you expect is actually what "
"you get."
msgstr ""

#: ../../debugging.rst:135
msgid ""
"In this particular case, ``             rm \"$badname\"           `` will "
"not give the desired results because ``      $badname     `` should not be "
"quoted. Placing it in quotes ensures that **rm** has only one argument (it "
"will match only one filename). A partial fix is to remove to quotes from ``"
"      $badname     `` and to reset ``      $IFS     `` to contain only a "
"newline, ``             IFS=$'\\n'           `` . However, there are simpler"
" ways of going about it."
msgstr ""

#: ../../debugging.rst:154
msgid "Summarizing the symptoms of a buggy script,"
msgstr ""

#: ../../debugging.rst:156
msgid "It bombs with a \" syntax error \" message, or"
msgstr ""

#: ../../debugging.rst:158
msgid "It runs, but does not work as expected ( logic error )."
msgstr ""

#: ../../debugging.rst:160
msgid "It runs, works as expected, but has nasty side effects ( logic bomb )."
msgstr ""

#: ../../debugging.rst:163
msgid "Tools for debugging non-working scripts include"
msgstr ""

#: ../../debugging.rst:165
msgid ""
"Inserting `echo <internal.html#ECHOREF>`__ statements at critical points in "
"the script to trace the variables, and otherwise give a snapshot of what is "
"going on."
msgstr ""

#: ../../debugging.rst:171
msgid "|Tip"
msgstr ""

#: ../../debugging.rst:173
msgid "Even better is an **echo** that echoes only when *debug* is on."
msgstr ""

#: ../../debugging.rst:180
msgid "cho), by Stefano Falsett o ###"
msgstr ""

#: ../../debugging.rst:182
msgid "### Will echo passed"
msgstr ""

#: ../../debugging.rst:183
msgid "parameters only if DEBU"
msgstr ""

#: ../../debugging.rst:186
msgid "if [ ! -z \"$DEBUG\""
msgstr ""

#: ../../debugging.rst:188
msgid "echo \"$1\" >&2 #         ^^^ t"
msgstr ""

#: ../../debugging.rst:191
msgid "fi"
msgstr ""

#: ../../debugging.rst:192
msgid "}"
msgstr ""

#: ../../debugging.rst:194
msgid "DEBUG=on Whatever=whatnot debecho $Whatever"
msgstr ""

#: ../../debugging.rst:197
msgid "# whatnot"
msgstr ""

#: ../../debugging.rst:199
msgid "DEBUG= Whatever=notwhat debecho $Whatever"
msgstr ""

#: ../../debugging.rst:202
msgid "# (Will not echo.)"
msgstr ""

#: ../../debugging.rst:250
msgid ""
"Using the `tee <extmisc.html#TEEREF>`__ filter to check processes or data "
"flows at critical points."
msgstr ""

#: ../../debugging.rst:253
msgid "Setting option flags ``        -n -v -x       ``"
msgstr ""

#: ../../debugging.rst:255
msgid ""
"``                 sh -n scriptname               `` checks for syntax "
"errors without actually running the script. This is the equivalent of "
"inserting ``                 set -n               `` or ``                 "
"set -o noexec               `` into the script. Note that certain types of "
"syntax errors can slip past this check."
msgstr ""

#: ../../debugging.rst:261
msgid ""
"``                 sh -v scriptname               `` echoes each command "
"before executing it. This is the equivalent of inserting ``                 "
"set -v               `` or ``                 set           -o verbose"
"               `` in the script."
msgstr ""

#: ../../debugging.rst:267
msgid ""
"The ``        -n       `` and ``        -v       `` flags work well "
"together. ``                 sh -nv           scriptname               `` "
"gives a verbose syntax check."
msgstr ""

#: ../../debugging.rst:272
msgid ""
"``                 sh -x scriptname               `` echoes the result each "
"command, but in an abbreviated manner. This is the equivalent of inserting "
"``                 set -x               `` or ``                 set -o "
"xtrace               `` in the script."
msgstr ""

#: ../../debugging.rst:277
msgid ""
"Inserting ``                 set -u               `` or ``                 "
"set -o nounset               `` in the script runs it, but gives an unbound "
"variable error message and aborts the script."
msgstr ""

#: ../../debugging.rst:299
msgid ""
"Using an \"assert\" function to test a variable or condition at critical "
"points in a script. (This is an idea borrowed from C.)"
msgstr ""

#: ../../debugging.rst:304
msgid "Exemple 4. Testing a condition with an *assert*"
msgstr ""

#: ../../debugging.rst:361
msgid ""
"Using the `$LINENO <internalvariables.html#LINENOREF>`__ variable and the "
"`caller <internal.html#CALLERREF>`__ builtin."
msgstr ""

#: ../../debugging.rst:364
msgid "Trapping at exit."
msgstr ""

#: ../../debugging.rst:366
msgid ""
"The `exit <internal.html#EXITREF>`__ command in a script triggers a signal 0"
" , terminating the process, that is, the script itself. ` [1]"
msgstr ""

#: ../../debugging.rst:368
msgid "<debugging.html#FTN.AEN19460>`__ It is often useful to trap the"
msgstr ""

#: ../../debugging.rst:369
msgid ""
"*exit* , forcing a \"printout\" of variables, for example. The *trap* must "
"be the first command in the script."
msgstr ""

#: ../../debugging.rst:373
msgid "** Trapping signals**"
msgstr ""

#: ../../debugging.rst:376
msgid "Specifies an action on receipt of a signal; also useful for debugging."
msgstr ""

#: ../../debugging.rst:381
msgid ""
"A *signal* is a message sent to a process, either by the kernel or another "
"process, telling it to take some specified action (usually to terminate). "
"For example, hitting a `Control-C <special-chars.html#CTLCREF>`__ sends a "
"user interrupt, an INT signal, to a running program."
msgstr ""

#: ../../debugging.rst:390
msgid "*A simple instance:*"
msgstr ""

#: ../../debugging.rst:407
msgid "Exemple 5. Trapping at exit"
msgstr ""

#: ../../debugging.rst:438
msgid "Exemple 6. Cleaning up after **Control-C**"
msgstr ""

#: ../../debugging.rst:536
msgid "Exemple 7. A Simple Implementation of a Progress Bar"
msgstr ""

#: ../../debugging.rst:578 ../../debugging.rst:876
msgid "|Note"
msgstr ""

#: ../../debugging.rst:580
msgid ""
"The ``         DEBUG        `` argument to **trap** causes a specified "
"action to execute after every command in a script. This permits tracing "
"variables, for example."
msgstr ""

#: ../../debugging.rst:586
msgid "Exemple 8. Tracing a variable"
msgstr ""

#: ../../debugging.rst:699
msgid ""
"Of course, the **trap** command has other uses aside from debugging, such as"
" disabling certain keystrokes within a script (see `Example A-43 "
"<contributed-scripts.html#STOPWATCH>`__ )."
msgstr ""

#: ../../debugging.rst:705
msgid "Exemple 9. Running multiple processes (on an SMP box)"
msgstr ""

#: ../../debugging.rst:878
msgid ""
"``                   trap '' SIGNAL                 `` (two adjacent "
"apostrophes) disables SIGNAL for the remainder of the script. ``"
"                   trap SIGNAL                 `` restores the functioning "
"of SIGNAL once more. This is useful to protect a critical portion of a "
"script from an undesirable interrupt."
msgstr ""

#: ../../debugging.rst:901
msgid ""
"`Version 3 <bashver3.html#BASH3REF>`__ of Bash adds the following `internal "
"variables <internalvariables.html#INTERNALVARIABLES1>`__ for use by the "
"debugger."
msgstr ""

#: ../../debugging.rst:905
msgid "``           $BASH_ARGC          ``"
msgstr ""

#: ../../debugging.rst:907
msgid ""
"Number of command-line arguments passed to script, similar to ``            "
"$#           `` <internalvariables.html#CLACOUNTREF>`__ ."
msgstr ""

#: ../../debugging.rst:911
msgid "``           $BASH_ARGV          ``"
msgstr ""

#: ../../debugging.rst:913
msgid ""
"Final command-line parameter passed to script, equivalent ``            "
"${!#}           `` <othertypesv.html#LASTARGREF>`__ ."
msgstr ""

#: ../../debugging.rst:916
msgid "``           $BASH_COMMAND          ``"
msgstr ""

#: ../../debugging.rst:918
msgid "Command currently executing."
msgstr ""

#: ../../debugging.rst:920
msgid "``           $BASH_EXECUTION_STRING          ``"
msgstr ""

#: ../../debugging.rst:922
msgid ""
"The *option string* following the ``           -c          `` `option <bash-"
"options.html#CLOPTS>`__ to Bash."
msgstr ""

#: ../../debugging.rst:925
msgid "``           $BASH_LINENO          ``"
msgstr ""

#: ../../debugging.rst:927
msgid ""
"In a `function <functions.html#FUNCTIONREF>`__ , indicates the line number "
"of the function call."
msgstr ""

#: ../../debugging.rst:930
msgid "``           $BASH_REMATCH          ``"
msgstr ""

#: ../../debugging.rst:932
msgid ""
"Array variable associated with **=~** `conditional regex matching "
"<bashver3.html#REGEXMATCHREF>`__ ."
msgstr ""

#: ../../debugging.rst:937
msgid "``           $BASH_SOURCE          ``"
msgstr ""

#: ../../debugging.rst:939
msgid ""
"This is the name of the script, usually the same as `$0 "
"<othertypesv.html#ARG0>`__ ."
msgstr ""

#: ../../debugging.rst:942
msgid ""
"``            $BASH_SUBSHELL           `` "
"<internalvariables.html#BASHSUBSHELLREF>`__"
msgstr ""

#: ../../debugging.rst:949
msgid "Notes"
msgstr ""

#: ../../debugging.rst:952
msgid "` [1]  <debugging.html#AEN19460>`__"
msgstr ""

#: ../../debugging.rst:954
msgid ""
"By convention, ``               signal         0             `` is assigned "
"to `exit <exit-status.html#EXITCOMMANDREF>`__ ."
msgstr ""
