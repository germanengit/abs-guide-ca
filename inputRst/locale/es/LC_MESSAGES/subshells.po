# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-27 20:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../subshells.rst:4
msgid "XXX  Chapter 21. Subshells"
msgstr ""

#: ../../subshells.rst:6
msgid "Running a shell script launches a new process, a *subshell* ."
msgstr ""

#: ../../subshells.rst:10
msgid ""
"``                   Definition:                 `` A *subshell* is a `child"
" process <othertypesv.html#CHILDREF2>`__ launched by a shell (or *shell "
"script* )."
msgstr ""

#: ../../subshells.rst:17
msgid ""
"A subshell is a separate instance of the command processor -- the *shell* "
"that gives you the prompt at the console or in an *xterm* window. Just as "
"your commands are interpreted at the command-line prompt, similarly does a "
"script `batch-process <timedate.html#BATCHPROCREF>`__ a list of commands. "
"Each shell script running is, in effect, a subprocess ( *child process* ) of"
" the `parent <internal.html#FORKREF>`__ shell."
msgstr ""

#: ../../subshells.rst:25
msgid ""
"A shell script can itself launch subprocesses. These *subshells* let the "
"script do parallel processing, in effect executing multiple subtasks "
"simultaneously."
msgstr ""

#: ../../subshells.rst:70
msgid ""
"In general, an `external command <external.html#EXTERNALREF>`__ in a script "
"`forks off <internal.html#FORKREF>`__ a subprocess, ` [1]"
msgstr ""

#: ../../subshells.rst:72
msgid "<subshells.html#FTN.AEN18102>`__ whereas a Bash"
msgstr ""

#: ../../subshells.rst:73
msgid ""
"`builtin <internal.html#BUILTINREF>`__ does not. For this reason, builtins "
"execute more quickly and use fewer system resources than their external "
"command equivalents."
msgstr ""

#: ../../subshells.rst:78
msgid "** Command List within Parentheses**"
msgstr ""

#: ../../subshells.rst:81
msgid ""
"A command list embedded between ``                   parentheses"
"                 `` runs as a subshell."
msgstr ""

#: ../../subshells.rst:86
msgid "Variables in a subshell are *not* visible outside the block of code in"
msgstr ""

#: ../../subshells.rst:87
msgid ""
"the subshell. They are not accessible to the `parent process "
"<internal.html#FORKREF>`__ , to the shell that launched the subshell. These "
"are, in effect, variables `local <localvar.html#LOCALREF>`__ to the *child "
"process* ."
msgstr ""

#: ../../subshells.rst:94
msgid "Exemple 1. Variable scope in a subshell"
msgstr ""

#: ../../subshells.rst:172
msgid ""
"See also `$BASHPID <internalvariables.html#BASHPIDREF>`__ and `Example 34-2 "
"<gotchas.html#SUBPIT>`__ ."
msgstr ""

#: ../../subshells.rst:177
msgid ""
"``                   Definition:                 `` The *scope* of a "
"variable is the context in which it has meaning, in which it has a *value* "
"that can be referenced. For example, the scope of a `local variable "
"<localvar.html#LOCALREF1>`__ lies only within the function, block of code, "
"or subshell within which it is defined, while the scope of a *global* "
"variable is the entire script in which it appears."
msgstr ""

#: ../../subshells.rst:189 ../../subshells.rst:391
msgid "|Note"
msgstr ""

#: ../../subshells.rst:191
msgid ""
"While the `$BASH\\_SUBSHELL <internalvariables.html#BASHSUBSHELLREF>`__ "
"internal variable indicates the nesting level of a subshell, the `$SHLVL "
"<internalvariables.html#SHLVLREF>`__ variable *shows no change* within a "
"subshell."
msgstr ""

#: ../../subshells.rst:203
msgid "# 0 ( echo \" \\$BASH_SU"
msgstr ""

#: ../../subshells.rst:206
msgid "= $BASH_SUBSHELL\""
msgstr ""

#: ../../subshells.rst:208
msgid "( ( echo \" \\$BASH_"
msgstr ""

#: ../../subshells.rst:209
msgid "SUBSHELL inside nested s ubshell = $BASH_SUBSHELL \" ) ) # 2"
msgstr ""

#: ../../subshells.rst:213
msgid "*** nested *"
msgstr ""

#: ../../subshells.rst:215
msgid "^ ^"
msgstr ""

#: ../../subshells.rst:217
msgid "echo"
msgstr ""

#: ../../subshells.rst:219
msgid "echo \" \\$SHLVL outsi"
msgstr ""

#: ../../subshells.rst:221
msgid "# 3 ( echo \" \\$SHLVL ins"
msgstr ""

#: ../../subshells.rst:223
msgid "ide subshell  = $SHLVL\" )   # 3 (No change!)"
msgstr ""

#: ../../subshells.rst:258
msgid ""
"Directory changes made in a subshell do not carry over to the parent shell."
msgstr ""

#: ../../subshells.rst:263
msgid "Exemple 2. List User Profiles"
msgstr ""

#: ../../subshells.rst:291
msgid ""
"A subshell may be used to set up a \"dedicated environment\" for a command "
"group."
msgstr ""

#: ../../subshells.rst:316
msgid ""
"As seen here, the `exit <internal.html#EXITREF>`__ command only terminates "
"the subshell in which it is running, *not* the parent shell or script. One "
"application of such a \"dedicated environment\" is testing whether a "
"variable is defined."
msgstr ""

#: ../../subshells.rst:339
msgid "Another application is checking for a lock file:"
msgstr ""

#: ../../subshells.rst:359
msgid ""
"Processes may execute in parallel within different subshells. This permits "
"breaking a complex task into subcomponents processed concurrently."
msgstr ""

#: ../../subshells.rst:365
msgid "Exemple 3. Running parallel processes in subshells"
msgstr ""

#: ../../subshells.rst:386
msgid ""
"Redirecting I/O to a subshell uses the \"\\|\" pipe operator, as in ``"
"             ls -al(command)           `` ."
msgstr ""

#: ../../subshells.rst:393
msgid ""
"A code block between `curly brackets <special-chars.html#CODEBLOCKREF>`__ "
"does *not* launch a subshell."
msgstr ""

#: ../../subshells.rst:397
msgid "{ command1; command2; command3; . . . commandN; }"
msgstr ""

#: ../../subshells.rst:435
msgid "Notes"
msgstr ""

#: ../../subshells.rst:438
msgid "` [1]  <subshells.html#AEN18102>`__"
msgstr ""

#: ../../subshells.rst:440
msgid ""
"An external command invoked with an `exec <internal.html#EXECREF>`__ does "
"*not* (usually) fork off a subprocess / subshell."
msgstr ""
