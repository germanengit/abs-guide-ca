# 
msgid ""
msgstr ""
"Project-Id-Version: Traducció abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-27 20:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../ops.rst:3
msgid "XXX  8.1. Operators"
msgstr ""

#: ../../ops.rst:6
msgid "** assignment**"
msgstr ""

#: ../../ops.rst:9
msgid "Initializing or changing the value of a variable"
msgstr ""

#: ../../ops.rst:12
msgid ""
"All-purpose assignment operator, which works for both arithmetic and string "
"assignments."
msgstr ""

#: ../../ops.rst:27
msgid ""
"Do not confuse the \"=\" assignment operator with the `= test operator "
"<comparison-ops.html#EQUALSIGNREF>`__ ."
msgstr ""

#: ../../ops.rst:35
msgid "rator"
msgstr ""

#: ../../ops.rst:37
msgid "if [ \"$string1\" = \"$"
msgstr ""

#: ../../ops.rst:40
msgid "command"
msgstr ""

#: ../../ops.rst:41
msgid "fi"
msgstr ""

#: ../../ops.rst:43
msgid "#  if [ \"X$string1\""
msgstr ""

#: ../../ops.rst:44
msgid "= \"X$string2\" ] is safer ,"
msgstr ""

#: ../../ops.rst:46
msgid "#+ to prevent an err"
msgstr ""

#: ../../ops.rst:49
msgid "#  (The prepended \"X"
msgstr ""

#: ../../ops.rst:50
msgid "\" characters cancel out. )"
msgstr ""

#: ../../ops.rst:89
msgid "** arithmetic operators**"
msgstr ""

#: ../../ops.rst:92
msgid "plus"
msgstr ""

#: ../../ops.rst:95
msgid "minus"
msgstr ""

#: ../../ops.rst:98
msgid "multiplication"
msgstr ""

#: ../../ops.rst:101
msgid "division"
msgstr ""

#: ../../ops.rst:104
msgid "exponentiation"
msgstr ""

#: ../../ops.rst:117
msgid ""
"modulo, or mod (returns the *remainder* of an integer division operation)"
msgstr ""

#: ../../ops.rst:129
msgid "*5/3 = 1, with remainder 2*"
msgstr ""

#: ../../ops.rst:131
msgid ""
"This operator finds use in, among other things, generating numbers within a "
"specific range (see `Example 9-11 <randomvar.html#EX21>`__ and `Example 9-15"
" <randomvar.html#RANDOMTEST>`__ ) and formatting program output (see "
"`Example 27-16 <arrays.html#QFUNCTION>`__ and `Example A-6 <contributed-"
"scripts.html#COLLATZ>`__ ). It can even be used to generate prime numbers, "
"(see `Example A-15 <contributed-scripts.html#PRIMES>`__ ). Modulo turns up "
"surprisingly often in numerical recipes."
msgstr ""

#: ../../ops.rst:142
msgid "Exemple 1. Greatest common divisor"
msgstr ""

#: ../../ops.rst:216
msgid "<ops.html#FTN.AEN3907>`__"
msgstr ""

#: ../../ops.rst:218
msgid ""
"``                   let \"var += 5\"                 `` results in ``"
"                   var                 `` being incremented by ``         5"
"        `` ."
msgstr ""

#: ../../ops.rst:223
msgid "*minus-equal* (decrement variable by a constant)"
msgstr ""

#: ../../ops.rst:226
msgid "*times-equal* (multiply variable by a constant)"
msgstr ""

#: ../../ops.rst:228
msgid ""
"``                   let \"var *= 4\"                 `` results in ``"
"                   var                 `` being multiplied by ``         4"
"        `` ."
msgstr ""

#: ../../ops.rst:233
msgid "*slash-equal* (divide variable by a constant)"
msgstr ""

#: ../../ops.rst:236
msgid "*mod-equal* ( *remainder* of dividing variable by a constant)"
msgstr ""

#: ../../ops.rst:238
msgid ""
"*Arithmetic operators often occur in an `expr <moreadv.html#EXPRREF>`__ or "
"`let <internal.html#LETREF>`__ expression.*"
msgstr ""

#: ../../ops.rst:245
msgid "Exemple 2. Ús dels operadors aritmètics"
msgstr ""

#: ../../ops.rst:309 ../../ops.rst:525 ../../ops.rst:551
msgid "|Note"
msgstr ""

#: ../../ops.rst:311
msgid ""
"Integer variables in older versions of Bash were signed *long* (32-bit) "
"integers, in the range of -2147483648 to 2147483647. An operation that took "
"a variable outside these limits gave an erroneous result."
msgstr ""

#: ../../ops.rst:332
msgid "echo \"a = $a\""
msgstr ""

#: ../../ops.rst:333
msgid "# a = -2147483648"
msgstr ""

#: ../../ops.rst:335
msgid "#      ERROR: out of ra"
msgstr ""

#: ../../ops.rst:336
msgid "nge,"
msgstr ""

#: ../../ops.rst:338
msgid "# +    and the leftmost bit, the sign bit,"
msgstr ""

#: ../../ops.rst:341
msgid "# +    has been set, ma"
msgstr ""

#: ../../ops.rst:342
msgid "king the result negative ."
msgstr ""

#: ../../ops.rst:348
msgid "As of version >= 2.05b, Bash supports 64-bit integers."
msgstr ""

#: ../../ops.rst:387
msgid ""
"Bash does not understand floating point arithmetic. It treats numbers "
"containing a decimal point as strings."
msgstr ""

#: ../../ops.rst:398
msgid "# t2.sh: let: b = 1."
msgstr ""

#: ../../ops.rst:402
msgid "(error token is"
msgstr ""

#: ../../ops.rst:403
msgid "\".5 + 1.3\")"
msgstr ""

#: ../../ops.rst:405
msgid "echo \"b = $b\""
msgstr ""

#: ../../ops.rst:406
msgid "# b=1"
msgstr ""

#: ../../ops.rst:411
msgid ""
"Use `bc <mathc.html#BCREF>`__ in scripts that that need floating point "
"calculations or math library functions."
msgstr ""

#: ../../ops.rst:440
msgid ""
"**bitwise operators.** The bitwise operators seldom make an appearance in "
"shell scripts. Their chief use seems to be manipulating and testing values "
"read from ports or `sockets <devref1.html#SOCKETREF>`__ . \"Bit flipping\" "
"is more relevant to compiled languages, such as C and C++, which provide "
"direct access to system hardware. However, see *vladz's* ingenious use of "
"bitwise operators in his *base64.sh* ( `Example A-54 <contributed-"
"scripts.html#BASE64>`__ ) script."
msgstr ""

#: ../../ops.rst:450
msgid "** bitwise operators**"
msgstr ""

#: ../../ops.rst:453
msgid ""
"bitwise left shift (multiplies by ``         2        `` for each shift "
"position)"
msgstr ""

#: ../../ops.rst:457
msgid "*left-shift-equal*"
msgstr ""

#: ../../ops.rst:459
msgid ""
"``                   let \"var <<= 2\"                 `` results in ``"
"                   var                 `` left-shifted ``         2        "
"`` bits (multiplied by ``         4        `` )"
msgstr ""

#: ../../ops.rst:464
msgid ""
"bitwise right shift (divides by ``         2        `` for each shift "
"position)"
msgstr ""

#: ../../ops.rst:468
msgid "*right-shift-equal* (inverse of <<= )"
msgstr ""

#: ../../ops.rst:471
msgid "bitwise AND"
msgstr ""

#: ../../ops.rst:474
msgid "bitwise *AND-equal*"
msgstr ""

#: ../../ops.rst:477
msgid "bitwise OR"
msgstr ""

#: ../../ops.rst:480
msgid "bitwise *OR-equal*"
msgstr ""

#: ../../ops.rst:483
msgid "bitwise NOT"
msgstr ""

#: ../../ops.rst:486
msgid "bitwise XOR"
msgstr ""

#: ../../ops.rst:489
msgid "bitwise *XOR-equal*"
msgstr ""

#: ../../ops.rst:493
msgid "** logical (boolean) operators**"
msgstr ""

#: ../../ops.rst:496
msgid "NOT"
msgstr ""

#: ../../ops.rst:508
msgid "AND"
msgstr ""

#: ../../ops.rst:527
msgid "&& may also be used, depending on context, in an `and"
msgstr ""

#: ../../ops.rst:528
msgid "list <list-cons.html#LISTCONSREF>`__ to concatenate commands."
msgstr ""

#: ../../ops.rst:534
msgid "OR"
msgstr ""

#: ../../ops.rst:553
msgid ""
"Bash tests the `exit status <exit-status.html#EXITSTATUSREF>`__ of each "
"statement linked with a logical operator."
msgstr ""

#: ../../ops.rst:561
msgid "Exemple 3. Compound Condition Tests Using && and \\|\\"
msgstr ""

#: ../../ops.rst:632
msgid "The && and \\|\\operators also find use in an arithmetic context."
msgstr ""

#: ../../ops.rst:645
msgid "** miscellaneous operators**"
msgstr ""

#: ../../ops.rst:648
msgid "Comma operator"
msgstr ""

#: ../../ops.rst:650
msgid ""
"The **comma operator** chains together two or more arithmetic operations. "
"All the operations are evaluated (with possible *side effects* . ` [2]  "
"<ops.html#FTN.AEN4242>`__"
msgstr ""

#: ../../ops.rst:666
msgid ""
"The comma operator finds use mainly in `for loops "
"<loops1.html#FORLOOPREF1>`__ . See `Example 11-13 <loops1.html#FORLOOPC>`__ "
"."
msgstr ""

#: ../../ops.rst:673
msgid "Notes"
msgstr ""

#: ../../ops.rst:676
msgid "` [1]  <ops.html#AEN3907>`__"
msgstr ""

#: ../../ops.rst:678
msgid ""
"In a different context, **+=** can serve as a *string concatenation* "
"operator. This can be useful for `modifying *environmental variables* "
"<bashver3.html#PATHAPPEND>`__ ."
msgstr ""

#: ../../ops.rst:683
msgid "` [2]  <ops.html#AEN4242>`__"
msgstr ""

#: ../../ops.rst:685
msgid ""
"*Side effects* are, of course, unintended -- and usually undesirable -- "
"consequences."
msgstr ""
