# 
msgid ""
msgstr ""
"Project-Id-Version: Traducció abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-27 20:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../othertypesv.rst:4
msgid "XXX  4.4. Special Variable Types"
msgstr ""

#: ../../othertypesv.rst:8
msgid ""
"Variables `visible <subshells.html#SCOPEREF>`__ only within a `code block "
"<special-chars.html#CODEBLOCKREF>`__ or function (see also `local variables "
"<localvar.html#LOCALREF>`__ in `functions <functions.html#FUNCTIONREF>`__ )"
msgstr ""

#: ../../othertypesv.rst:14
msgid "Variables that affect the behavior of the shell and user interface"
msgstr ""

#: ../../othertypesv.rst:18 ../../othertypesv.rst:91 ../../othertypesv.rst:399
msgid "|Note"
msgstr ""

#: ../../othertypesv.rst:20
msgid ""
"In a more general context, each `process <special-chars.html#PROCESSREF>`__ "
"has an \"environment\" , that is, a group of variables that the process may "
"reference. In this sense, the shell behaves like any other process."
msgstr ""

#: ../../othertypesv.rst:25
msgid ""
"Every time a shell starts, it creates shell variables that correspond to its"
" own environmental variables. Updating or adding new environmental variables"
" causes the shell to update its environment, and all the shell's *child "
"processes* (the commands it executes) inherit this environment."
msgstr ""

#: ../../othertypesv.rst:36
msgid "|Caution"
msgstr ""

#: ../../othertypesv.rst:38
msgid ""
"The space allotted to the environment is limited. Creating too many "
"environmental variables or ones that use up excessive space may cause "
"problems."
msgstr ""

#: ../../othertypesv.rst:48
msgid "var&=ZZZZZZZZZZZZZZ/'`\""
msgstr ""

#: ../../othertypesv.rst:50
msgid "bash$ du bash: /usr/bin/du: A"
msgstr ""

#: ../../othertypesv.rst:52
msgid "rgument list too long"
msgstr ""

#: ../../othertypesv.rst:58
msgid "Note: this \"error\" has been fixed, as of kernel version 2.6.23."
msgstr ""

#: ../../othertypesv.rst:60
msgid ""
"(Thank you, StÃ©phane Chazelas for the clarification, and for providing the "
"above example.)"
msgstr ""

#: ../../othertypesv.rst:84
msgid ""
"If a script sets environmental variables, they need to be \"exported,\" that"
" is, reported to the *environment* local to the script. This is the function"
" of the `export <internal.html#EXPORTREF>`__ command."
msgstr ""

#: ../../othertypesv.rst:93
msgid ""
"A script can **export** variables only to child `processes <special-"
"chars.html#PROCESSREF>`__ , that is, only to commands or processes which "
"that particular script initiates. A script invoked from the command-line ``"
"                         cannot                       `` export variables "
"back to the command-line environment. *`Child processes "
"<internal.html#FORKREF>`__ cannot export variables back to the parent "
"processes that spawned them.*"
msgstr ""

#: ../../othertypesv.rst:102
msgid "``                         Definition:                       `` A"
msgstr ""

#: ../../othertypesv.rst:103
msgid ""
"*child process* is a subprocess launched by another process, its `parent "
"<internal.html#PARENTREF>`__ ."
msgstr ""

#: ../../othertypesv.rst:111
msgid "<othertypesv.html#FTN.AEN2450>`__ : ``         $0        `` ,"
msgstr ""

#: ../../othertypesv.rst:112
msgid ""
"``         $1        `` , ``         $2        `` , ``         $3        `` "
". . ."
msgstr ""

#: ../../othertypesv.rst:115
msgid "``         $0        `` is the name of the script itself,"
msgstr ""

#: ../../othertypesv.rst:116
msgid ""
"``         $1        `` is the first argument, ``         $2        `` the "
"second, ``         $3        `` the third, and so forth. ` [2]  "
"<othertypesv.html#FTN.AEN2464>`__ After ``         $9        `` , the "
"arguments must be enclosed in brackets, for example, ``         ${10}"
"        `` , ``         ${11}        `` , ``         ${12}        `` ."
msgstr ""

#: ../../othertypesv.rst:123
msgid ""
"The special variables `$\\* and $@ <internalvariables.html#APPREF>`__ denote"
" *all* the positional parameters."
msgstr ""

#: ../../othertypesv.rst:128
msgid "Exemple 5. Positional Parameters"
msgstr ""

#: ../../othertypesv.rst:187
msgid ""
"*Bracket notation* for positional parameters leads to a fairly simple way of"
" referencing the *last* argument passed to a script on the command-line. "
"This also requires `indirect referencing <bashver2.html#VARREFNEW>`__ ."
msgstr ""

#: ../../othertypesv.rst:206
msgid ""
"Some scripts can perform different operations, depending on which name they "
"are invoked with. For this to work, the script needs to check ``         $0"
"        `` , the name it was invoked by. ` [3]"
msgstr ""

#: ../../othertypesv.rst:209
msgid "<othertypesv.html#FTN.AEN2501>`__ There must also exist symbolic"
msgstr ""

#: ../../othertypesv.rst:210
msgid ""
"links to all the alternate names of the script. See `Example 16-2 "
"<basic.html#HELLOL>`__ ."
msgstr ""

#: ../../othertypesv.rst:215
msgid "|Tip"
msgstr ""

#: ../../othertypesv.rst:217
msgid ""
"If a script expects a command-line parameter but is invoked without one, "
"this may cause a *null variable assignment* , generally an undesirable "
"result. One way to prevent this is to append an extra character to both "
"sides of the assignment statement using the expected positional parameter."
msgstr ""

#: ../../othertypesv.rst:257 ../../othertypesv.rst:302
msgid "---"
msgstr ""

#: ../../othertypesv.rst:261
msgid "Exemple 6. *wh* , *whois* domain name lookup"
msgstr ""

#: ../../othertypesv.rst:304
msgid ""
"The **shift** command reassigns the positional parameters, in effect "
"shifting them to the left one notch."
msgstr ""

#: ../../othertypesv.rst:307
msgid ""
"``         $1        `` <--- ``         $2        `` , ``         $2        "
"`` <--- ``         $3        `` , ``         $3        `` <--- ``         $4"
"        `` , etc."
msgstr ""

#: ../../othertypesv.rst:311
msgid ""
"The old ``         $1        `` disappears, but *``          $0         `` "
"(the script name) does not change* . If you use a large number of positional"
" parameters to a script, **shift** lets you access those past ``         10"
"        `` , although `{bracket} notation "
"<othertypesv.html#BRACKETNOTATION>`__ also permits this."
msgstr ""

#: ../../othertypesv.rst:320
msgid "Exemple 7. Using *shift*"
msgstr ""

#: ../../othertypesv.rst:356
msgid ""
"The **shift** command can take a numerical parameter indicating how many "
"positions to shift."
msgstr ""

#: ../../othertypesv.rst:401
msgid ""
"The **shift** command works in a similar fashion on parameters passed to a "
"`function <functions.html#FUNCTIONREF>`__ . See `Example 36-18 "
"<assortedtips.html#MULTIPLICATION>`__ ."
msgstr ""

#: ../../othertypesv.rst:411
msgid "Notes"
msgstr ""

#: ../../othertypesv.rst:414
msgid "` [1]  <othertypesv.html#AEN2450>`__"
msgstr ""

#: ../../othertypesv.rst:416
msgid ""
"Note that `*functions* also take positional parameters "
"<complexfunct.html#PASSEDARGS>`__ ."
msgstr ""

#: ../../othertypesv.rst:420
msgid "` [2]  <othertypesv.html#AEN2464>`__"
msgstr ""

#: ../../othertypesv.rst:422
msgid "The process calling the script sets the ``       $0      `` parameter."
msgstr ""

#: ../../othertypesv.rst:423
msgid ""
"By convention, this parameter is the name of the script. See the `manpage "
"<basic.html#MANREF>`__ (manual page) for **execv** ."
msgstr ""

#: ../../othertypesv.rst:426
msgid ""
"From the *command-line* , however, ``       $0      `` is the name of the "
"shell."
msgstr ""

#: ../../othertypesv.rst:461
msgid "` [3]  <othertypesv.html#AEN2501>`__"
msgstr ""

#: ../../othertypesv.rst:463
msgid ""
"If the the script is `sourced <internal.html#SOURCEREF>`__ or `symlinked "
"<basic.html#SYMLINKREF>`__ , then this will not work. It is safer to check "
"`$BASH\\_Source <debugging.html#BASHSOURCEREF>`__ ."
msgstr ""
