# 
msgid ""
msgstr ""
"Project-Id-Version: Traducci√≥ abs-guide branca git gettext-way 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-28 12:11\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../loops1.rst:4
msgid "XXX  11.1. Loops"
msgstr ""

#: ../../loops1.rst:7
msgid "<loops1.html#FTN.AEN6560>`__ a list of commands as long as the *loop"
msgstr ""

#: ../../loops1.rst:8
msgid "control condition* is true."
msgstr ""

#: ../../loops1.rst:11
msgid "** for loops**"
msgstr ""

#: ../../loops1.rst:13
msgid "**for ``                   arg                 `` in"
msgstr ""

#: ../../loops1.rst:15
msgid ""
"This is the basic looping construct. It differs significantly from its *C* "
"counterpart."
msgstr ""

#: ../../loops1.rst:19
msgid "``                   list                 `` ]"
msgstr ""

#: ../../loops1.rst:20 ../../loops1.rst:838 ../../loops1.rst:1121
msgid "do ``                   command(s)                 `` ... done"
msgstr ""

#: ../../loops1.rst:26 ../../loops1.rst:719 ../../loops1.rst:1103
msgid "|Note"
msgstr ""

#: ../../loops1.rst:28
msgid ""
"During each pass through the loop, ``                         arg"
"                       `` takes on the value of each successive variable in "
"the ``                         list                       `` ."
msgstr ""

#: ../../loops1.rst:50
msgid ""
"The argument ``                   list                 `` may contain `wild "
"cards <special-chars.html#ASTERISKREF>`__ ."
msgstr ""

#: ../../loops1.rst:53
msgid ""
"If *do* is on same line as *for* , there needs to be a semicolon after list."
msgstr ""

#: ../../loops1.rst:57
msgid "``                   list                 `` ] ; do"
msgstr ""

#: ../../loops1.rst:61
msgid "Exemple 1. Simple *for* loops"
msgstr ""

#: ../../loops1.rst:91
msgid ""
"Each ``                   [list]                 `` element may contain "
"multiple parameters. This is useful when processing parameters in groups. In"
" such cases, use the `set <internal.html#SETREF>`__ command (see `Example "
"15-16 <internal.html#EX34>`__ ) to force parsing of each ``"
"                   [list]                 `` element and assignment of each "
"component to the positional parameters."
msgstr ""

#: ../../loops1.rst:101
msgid "Exemple 2. *for* loop with two parameters in each [list] element"
msgstr ""

#: ../../loops1.rst:134
msgid ""
"A variable may supply the ``                   [list]                 `` in "
"a *for loop* ."
msgstr ""

#: ../../loops1.rst:139
msgid ""
"Exemple 3. *Fileinfo:* operating on a file list contained in a variable"
msgstr ""

#: ../../loops1.rst:178
msgid ""
"The ``                   [list]                 `` in a *for loop* may be "
"parameterized."
msgstr ""

#: ../../loops1.rst:183
msgid "Exemple 4. Operating on a parameterized file list"
msgstr ""

#: ../../loops1.rst:203
msgid ""
"If the ``                   [list]                 `` in a *for loop* "
"contains wild cards ( \\* and ? ) used in filename expansion, then `globbing"
" <globbingref.html>`__ takes place."
msgstr ""

#: ../../loops1.rst:209
msgid "Exemple 5. Operating on files with a *for* loop"
msgstr ""

#: ../../loops1.rst:249
msgid ""
"Omitting the ``                   in [list]                 `` part of a "
"*for loop* causes the loop to operate on $@ -- the `positional parameters "
"<internalvariables.html#POSPARAMREF>`__ . A particularly clever illustration"
" of this is `Example A-15 <contributed-scripts.html#PRIMES>`__ . See also "
"`Example 15-17 <internal.html#REVPOSPARAMS>`__ ."
msgstr ""

#: ../../loops1.rst:258
msgid ""
"Exemple 6. Missing ``                       in [list]                     ``"
" in a *for* loop"
msgstr ""

#: ../../loops1.rst:283
msgid ""
"It is possible to use `command substitution "
"<commandsub.html#COMMANDSUBREF>`__ to generate the ``                   "
"[list]                 `` in a *for loop* . See also `Example 16-54 "
"<extmisc.html#EX53>`__ , `Example 11-11 <loops1.html#SYMLINKS>`__ and "
"`Example 16-48 <mathc.html#BASE>`__ ."
msgstr ""

#: ../../loops1.rst:292
msgid ""
"Exemple 7. Generating the ``[list]`` in a *for* loop with command "
"substitution"
msgstr ""

#: ../../loops1.rst:313
msgid ""
"Here is a somewhat more complex example of using command substitution to "
"create the ``                   [list]                 `` ."
msgstr ""

#: ../../loops1.rst:319
msgid "Exemple 8. A *grep* replacement for binary files"
msgstr ""

#: ../../loops1.rst:367
msgid "More of the same."
msgstr ""

#: ../../loops1.rst:371
msgid "Exemple 9. Listing all users on the system"
msgstr ""

#: ../../loops1.rst:409
msgid ""
"Yet another example of the ``                   [list]                 `` "
"resulting from command substitution."
msgstr ""

#: ../../loops1.rst:415
msgid "Exemple 10. Checking all the binaries in a directory for authorship"
msgstr ""

#: ../../loops1.rst:446
msgid ""
"A final example of ``                   [list]                 `` / command "
"substitution, but this time the \"command\" is a `function "
"<functions.html#FUNCTIONREF>`__ ."
msgstr ""

#: ../../loops1.rst:469
msgid "The output of a *for loop* may be piped to a command or commands."
msgstr ""

#: ../../loops1.rst:473
msgid "Exemple 11. Listing the *symbolic links* in a directory"
msgstr ""

#: ../../loops1.rst:545
msgid ""
"The ``         stdout        `` of a loop may be `redirected <io-"
"redirection.html#IOREDIRREF>`__ to a file, as this slight modification to "
"the previous example shows."
msgstr ""

#: ../../loops1.rst:551
msgid "Exemple 12. Symbolic links in a directory, saved to a file"
msgstr ""

#: ../../loops1.rst:582
msgid ""
"There is an alternative syntax to a *for loop* that will look very familiar "
"to C programmers. This requires `double parentheses "
"<dblparens.html#DBLPARENSREF>`__ ."
msgstr ""

#: ../../loops1.rst:588
msgid "Exemple 13. A C-style *for* loop"
msgstr ""

#: ../../loops1.rst:656
msgid ""
"See also `Example 27-16 <arrays.html#QFUNCTION>`__ , `Example 27-17 "
"<arrays.html#TWODIM>`__ , and `Example A-6 <contributed-"
"scripts.html#COLLATZ>`__ ."
msgstr ""

#: ../../loops1.rst:660
msgid "---"
msgstr ""

#: ../../loops1.rst:662
msgid "Now, a *for loop* used in a \"real-life\" context."
msgstr ""

#: ../../loops1.rst:666
msgid "Exemple 14. Using *efax* in batch mode"
msgstr ""

#: ../../loops1.rst:721
msgid "The `keywords <internal.html#KEYWORDREF>`__ **do** and **done**"
msgstr ""

#: ../../loops1.rst:722
msgid ""
"delineate the *for-loop* command block. However, these may, in certain "
"contexts, be omitted by framing the command block within `curly brackets "
"<special-chars.html#CODEBLOCKREF>`__"
msgstr ""

#: ../../loops1.rst:732
msgid "# No do! {"
msgstr ""

#: ../../loops1.rst:734
msgid "echo -n \"* $n *\""
msgstr ""

#: ../../loops1.rst:735
msgid "} # No done!"
msgstr ""

#: ../../loops1.rst:739
msgid "# Outputs: # * 1 ** 2 ** 3 ** 4"
msgstr ""

#: ../../loops1.rst:741
msgid "** 5 ** 6 ** 7 ** 8 **"
msgstr ""

#: ../../loops1.rst:743
msgid "# And, echo $? retur"
msgstr ""

#: ../../loops1.rst:744
msgid "ns 0, so Bash does not r egister an error."
msgstr ""

#: ../../loops1.rst:748
msgid "echo"
msgstr ""

#: ../../loops1.rst:751
msgid "#  But, note that in"
msgstr ""

#: ../../loops1.rst:752
msgid "a classic for-loop:"
msgstr ""

#: ../../loops1.rst:754
msgid "#+ a terminal semico"
msgstr ""

#: ../../loops1.rst:755
msgid "lon is required."
msgstr ""

#: ../../loops1.rst:757
msgid "for n in 1 2 3 {  echo -n \"$n \"; } #               ^"
msgstr ""

#: ../../loops1.rst:762
msgid "# Thank you, YongYe,"
msgstr ""

#: ../../loops1.rst:763
msgid "for pointing this out."
msgstr ""

#: ../../loops1.rst:830
msgid ""
"This construct tests for a condition at the top of a loop, and keeps looping"
" as long as that condition is true (returns a 0 `exit status <exit-"
"status.html#EXITSTATUSREF>`__ ). In contrast to a `for loop "
"<loops1.html#FORLOOPREF1>`__ , a *while loop* finds use in situations where "
"the number of loop repetitions is not known beforehand."
msgstr ""

#: ../../loops1.rst:842
msgid ""
"The bracket construct in a *while loop* is nothing more than our old friend,"
" the `test brackets <testconstructs.html#TESTCONSTRUCTS1>`__ used in an "
"*if/then* test. In fact, a *while loop* can legally use the more versatile "
"`double-brackets construct <testconstructs.html#DBLBRACKETS>`__ (while [[ "
"condition ]])."
msgstr ""

#: ../../loops1.rst:849
msgid ""
"`As is the case with *for loops* <loops1.html#NEEDSEMICOLON>`__ , placing "
"the *do* on the same line as the condition test requires a semicolon."
msgstr ""

#: ../../loops1.rst:853
msgid "**while** [ ``                   condition                 `` ] ; do"
msgstr ""

#: ../../loops1.rst:855
msgid ""
"Note that the *test brackets* `are *not* mandatory "
"<loops1.html#WHILENOBRACKETS>`__ in a *while* loop. See, for example, the "
"`getopts construct <internal.html#GETOPTSX>`__ ."
msgstr ""

#: ../../loops1.rst:861
msgid "Exemple 15. Simple *while* loop"
msgstr ""

#: ../../loops1.rst:892
msgid "Exemple 16. Another *while* loop"
msgstr ""

#: ../../loops1.rst:916
msgid ""
"A *while loop* may have multiple conditions. Only the final condition "
"determines when the loop terminates. This necessitates a slightly different "
"loop syntax, however."
msgstr ""

#: ../../loops1.rst:922
msgid "Exemple 17. *while* loop with multiple conditions"
msgstr ""

#: ../../loops1.rst:952
msgid ""
"As with a *for loop* , a *while loop* may employ C-style syntax by using the"
" double-parentheses construct (see also `Example 8-5 "
"<dblparens.html#CVARS>`__ )."
msgstr ""

#: ../../loops1.rst:958
msgid "Exemple 18. C-style syntax in a *while* loop"
msgstr ""

#: ../../loops1.rst:1001
msgid ""
"Inside its test brackets, a *while loop* can call a `function "
"<functions.html#FUNCTIONREF>`__ ."
msgstr ""

#: ../../loops1.rst:1037
msgid ""
"Similar to the `if-test <testconstructs.html#IFGREPREF>`__ construct, a "
"*while* loop can omit the test brackets."
msgstr ""

#: ../../loops1.rst:1069
msgid ""
"By coupling the power of the `read <internal.html#READREF>`__ command with a"
" *while loop* , we get the handy `while read <internal.html#WHILEREADREF>`__"
" construct, useful for reading and parsing files."
msgstr ""

#: ../../loops1.rst:1105
msgid ""
"A *while loop* may have its ``            stdin           `` `redirected to "
"a file <redircb.html#REDIRREF>`__ by a < at its end."
msgstr ""

#: ../../loops1.rst:1108
msgid ""
"A *while loop* may have its ``            stdin           `` `supplied by a "
"pipe <internal.html#READPIPEREF>`__ ."
msgstr ""

#: ../../loops1.rst:1115
msgid ""
"This construct tests for a condition at the top of a loop, and keeps looping"
" as long as that condition is *false* (opposite of *while loop* )."
msgstr ""

#: ../../loops1.rst:1120
msgid "``                   condition-is-true                 `` ]"
msgstr ""

#: ../../loops1.rst:1125
msgid ""
"Note that an *until loop* tests for the terminating condition at the *top* "
"of the loop, differing from a similar construct in some programming "
"languages."
msgstr ""

#: ../../loops1.rst:1129
msgid ""
"As is the case with *for loops* , placing the *do* on the same line as the "
"condition test requires a semicolon."
msgstr ""

#: ../../loops1.rst:1132
msgid ""
"**until** [ ``                   condition-is-true                 `` ] ; do"
msgstr ""

#: ../../loops1.rst:1137
msgid "Exemple 19. *until* loop"
msgstr ""

#: ../../loops1.rst:1177
msgid ""
"How to choose between a *for* loop or a *while* loop or *until* loop? In "
"**C** , you would typically use a *for* loop when the number of loop "
"iterations is known beforehand. With *Bash* , however, the situation is "
"fuzzier. The Bash *for* loop is more loosely structured and more flexible "
"than its equivalent in other languages. Therefore, feel free to use whatever"
" type of loop gets the job done in the simplest way."
msgstr ""

#: ../../loops1.rst:1186
msgid "Notes"
msgstr ""

#: ../../loops1.rst:1189
msgid "` [1]  <loops1.html#AEN6560>`__"
msgstr ""

#: ../../loops1.rst:1191
msgid "*Iteration* : Repeated execution of a command or group of commands,"
msgstr ""

#: ../../loops1.rst:1192
msgid ""
"usually -- but not always, *while* a given condition holds, or *until* a "
"given condition is met."
msgstr ""
